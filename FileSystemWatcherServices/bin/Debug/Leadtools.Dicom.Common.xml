<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.Dicom.Common</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.SoftCopyPresentationState">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.OverlayPlaneModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.OtherPatientId">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MaskSubstraction">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.DicomPropertyChoiceConverter">
      <summary>
            Provides a type converter to provide a list of choices to a dicom dynamic dicom property.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.DicomPropertyChoiceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns whether the collection of standard values is an exclusive list.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <returns>True if the list is exclusive, false otherwise.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.DicomPropertyChoiceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the standard values supported.
            </summary>
      <param name="context">Tn <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <returns>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.DicomPropertyChoiceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
      <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangeSeries">
      <summary>
            Provides the necessary information to change a series via the Patient Updater DICOM Service.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdate">
      <summary>
            Provides common information to all Patient Updater DICOM Service objects.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdate.Description">
      <summary>
            Gets or sets the description for this update action.
            </summary>
      <value>
            The description.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdate.Reason">
      <summary>
            Gets or sets the reason for this update action.
            </summary>
      <value>
            The reason.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdate.Operator">
      <summary>
            Gets or sets the name of the operator for this update action.
            </summary>
      <value>
            The operator.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdate.Station">
      <summary>
            Gets or sets the station name for this update operation.
            </summary>
      <value>
            The station.
            </value>
      <noexample />
      <remarks>
            Defaults to the machine name.
            </remarks>
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdate.Date">
      <summary>
            Gets or sets the date of this update action.
            </summary>
      <value>
            The date.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdate.Time">
      <summary>
            Gets or sets the time of this update action.
            </summary>
      <value>
            The time.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdate.TransactionID">
      <summary>
            Gets or sets the transaction ID of this update action.
            </summary>
      <value>
            The transaction ID.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangeSeries.SeriesDate">
      <summary>
            Gets or sets the series date.
            </summary>
      <value>
            The series date.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangeSeries.SeriesDescription">
      <summary>
            Gets or sets the series description.
            </summary>
      <value>
            The series description.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangeSeries.Modality">
      <summary>
            Gets or sets the modality.
            </summary>
      <value>
            The modality.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangeSeries.SeriesInstanceUID">
      <summary>
            Gets or sets the series instance UID of the series to change.
            </summary>
      <value>
            The series instance UID to change.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientBase">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult">
      <summary>
            Class that defines a Modality Worklist Result.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.StudyInstanceUid">
      <summary>
            Gets or sets the study instance uid.
            </summary>
      <value>The study instance uid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.RequestedProcedureId">
      <summary>
            Gets or sets the requested procedure id.
            </summary>
      <value>The requested procedure id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.RequestedProcedureDescription">
      <summary>
            Gets or sets the requested procedure description.
            </summary>
      <value>The requested procedure description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.NamesOfIntendedRecipients">
      <summary>
            Gets or sets the names of intended recipients.
            </summary>
      <value>The names of intended recipients.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.RequestedProcedureCodeSequence">
      <summary>
            Gets or sets the requested procedure code sequence.
            </summary>
      <value>The requested procedure code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.ReferencedStudySequence">
      <summary>
            Gets or sets the referenced study sequence.
            </summary>
      <value>The referenced study sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.ImagingServiceRequestComments">
      <summary>
            Gets or sets the imaging service request comments.
            </summary>
      <value>The imaging service request comments.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.AccessionNumber">
      <summary>
            Gets or sets the accession number.
            </summary>
      <value>The accession number.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.RequestingPhysician">
      <summary>
            Gets or sets the requesting physician.
            </summary>
      <value>The requesting physician.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.RequestingService">
      <summary>
            Gets or sets the requesting service.
            </summary>
      <value>The requesting service.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.ReferringPysician">
      <summary>
            Gets or sets the referring physician name.
            </summary>
      <value>The referring physician name.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.AdmissionId">
      <summary>
            Gets or sets the admission id.
            </summary>
      <value>The admission id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.CurrentPatientLocation">
      <summary>
            Gets or sets the current patient location.
            </summary>
      <value>The current patient location.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.ReferencedPatientSequence">
      <summary>
            Gets or sets the referenced patient sequence.
            </summary>
      <value>The referenced patient sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.PatientName">
      <summary>
            Gets or sets the name of the patient.
            </summary>
      <value>The name of the patient.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.PatientId">
      <summary>
            Gets or sets the patient id.
            </summary>
      <value>The patient id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.OtherPatientIds">
      <summary>
            Gets or sets the other patient ids.
            </summary>
      <value>The other patient ids.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.PatientBirthDate">
      <summary>
            Gets or sets the patient birth date.
            </summary>
      <value>The patient birth date.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.PatientSex">
      <summary>
            Gets or sets the patient sex.
            </summary>
      <value>The patient sex.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.ConfidentialityContstraint">
      <summary>
            Gets or sets the confidentiality constraint.
            </summary>
      <value>The confidentiality constraint.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.EthnicGroup">
      <summary>
            Gets or sets the ethnic group.
            </summary>
      <value>The ethnic group.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.PatientComments">
      <summary>
            Gets or sets the patient comments.
            </summary>
      <value>The patient comments.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.PatientState">
      <summary>
            Gets or sets the state of the patient.
            </summary>
      <value>The state of the patient.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.PregnancyStatus">
      <summary>
            Gets or sets the pregnancy status.
            </summary>
      <value>The pregnancy status.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.MedicalAlerts">
      <summary>
            Gets or sets the medical alerts.
            </summary>
      <value>The medical alerts.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.AdditionalPatientHistory">
      <summary>
            Gets or sets the additional patient history.
            </summary>
      <value>The additional patient history.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.ContrastAllergies">
      <summary>
            Gets or sets the contrast allergies.
            </summary>
      <value>The contrast allergies.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.PatientWeight">
      <summary>
            Gets or sets the patient weight.
            </summary>
      <value>The patient weight.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.SpecialNeeds">
      <summary>
            Gets or sets the special needs.
            </summary>
      <value>The special needs.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.ScheduledProcedureStepSequence">
      <summary>
            Gets or sets the scheduled procedure step sequence.
            </summary>
      <value>The scheduled procedure step sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult.Tag">
      <summary>
            Gets or sets the object that contains data about the class.
            </summary>
      <value>An object that contains data about the class. The default is null.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationRequestInformation">
      <summary>
            Hold information that is used during an Initiate Media Creation request.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationRequestInformation.Priority">
      <summary>
            Gets or sets the priority.
            </summary>
      <value>The priority of the request.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationRequestInformation.NumberOfCopies">
      <summary>
            Gets or sets the number of copies.
            </summary>
      <value>The number of copies of the media to be made.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationReferencedSop">
      <summary>
            Holds information about an SOP Instance to use in a media creation request.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationReferencedSop.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationReferencedSop" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationReferencedSop.SopInstance">
      <summary>
            Gets or sets the sop instance.
            </summary>
      <value>The sop instance to use in the media creation request.</value>
      <noexample />
      <remarks>The sop instance needs to already be present on the SCP.</remarks>
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationReferencedSop.RequestedMediaApplicationProfile">
      <summary>
            Gets or sets the requested media application profile.
            </summary>
      <value>The requested media application profile.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ImageBase">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.Blending">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.StructuredDisplay.StructuredDisplayModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Linq.QueryProvider">
      <summary>
            Represents a class that defines methods to create and execute queries that are described by an
            <see cref="T:System.Linq.IQueryable" /> object.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.QueryProvider.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
            Creates the query.
            </summary>
      <typeparam name="TElement">The type of the element.</typeparam>
      <param name="expression">The expression.</param>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.QueryProvider.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
            Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.
            </summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <returns>
            An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.QueryProvider.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>
            Executes the specified expression.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="expression">The expression.</param>
      <returns>The value that results from executing the specified query.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.QueryProvider.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>
            Executes the query represented by a specified expression tree.
            </summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <returns>
            The value that results from executing the specified query.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.QueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>
            Executes the query represented by a specified expression tree.
            </summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <returns>
            The value that results from executing the specified query.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.NominalScreenDefinition">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.ModalityLutModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PerformedSeries">
      <summary>
            Class that defines an item in a performed series sequence.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.PerformingPhysiciansName">
      <summary>
            Gets or sets the name of the performing physicians name.
            </summary>
      <value>The name of the performing physicians name.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.PerformingPhysicianIdentificationSequence">
      <summary>
            Gets or sets the performing physician identification sequence.
            </summary>
      <value>The performing physician identification sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.OperatorsName">
      <summary>
            Gets or sets the name of the operators name.
            </summary>
      <value>The name of the operators name.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.OperatorsIdentificationSequence">
      <summary>
            Gets or sets the operators identification sequence.
            </summary>
      <value>The operators identification sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.ProtocolName">
      <summary>
            Gets or sets the name of the protocol.
            </summary>
      <value>The name of the protocol.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.SeriesInstanceUID">
      <summary>
            Gets or sets the series instance UID.
            </summary>
      <value>The series instance UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.SeriesDescription">
      <summary>
            Gets or sets the series description.
            </summary>
      <value>The series description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.RetrieveAeTitle">
      <summary>
            Gets or sets the retrieve ae title.
            </summary>
      <value>The retrieve ae title.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.ArchiveRequested">
      <summary>
            Gets or sets the archive requested.
            </summary>
      <value>The archive requested.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.ReferencedImageSequence">
      <summary>
            Gets or sets the referenced image sequence.
            </summary>
      <value>The referenced image sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PerformedSeries.ReferencedNonImageCompositeSOPInstanceSequence">
      <summary>
            Gets or sets the referenced non image composite SOP instance sequence.
            </summary>
      <value>The referenced non image composite SOP instance sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangePatient">
      <summary>
            Provides the necessary information to change a patient via the Patient Updater DICOM Service.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangePatient.OriginalPatientId">
      <summary>
            Gets or sets the original patient id.
            </summary>
      <value>
            The original patient id.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangePatient.PatientId">
      <summary>
            Gets or sets the new patient id.
            </summary>
      <value>
            The new patient id.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangePatient.Name">
      <summary>
            Gets or sets the patient name.
            </summary>
      <value>
            The patient name.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangePatient.Sex">
      <summary>
            Gets or sets the patient sex.
            </summary>
      <value>
            The patient sex.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.ChangePatient.Birthdate">
      <summary>
            Gets or sets the patient birthdate.
            </summary>
      <value>
            The patient birthdate.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.StudiesContainingOtherReferencedInstances">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ContentIdentification">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.SOPCommonModule">
      <summary>
            Specifies the properties which are required for a proper functioning and identification of the associated SOP Instances.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.SOPClassUID">
      <summary>
            Gets or sets the SOP class UID.
            </summary>
      <value>The SOP class UID which uniquely identifies the SOP Class.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.SOPInstanceUID">
      <summary>
            Gets or sets the SOP instance UID.
            </summary>
      <value>The SOP instance UID which uniquely identifies the SOP Instance.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.SpecificCharacterSet">
      <summary>
            Gets or sets the specific character set.
            </summary>
      <value>The specific character set that expands or replaces the Basic Graphic Set..</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.InstanceCreationDate">
      <summary>
            Gets or sets the instance creation date.
            </summary>
      <value>The date the SOP instance was created.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.InstanceCreationTime">
      <summary>
            Gets or sets the instance creation time.
            </summary>
      <value>The time the SOP instance was created.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.InstanceCreatorUID">
      <summary>
            Gets or sets the instance creator UID.
            </summary>
      <value>The UID which uniquely identifies the device which created the SOP instance.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.RelatedGeneralSOPClassUID">
      <summary>
            Gets or sets the related general SOP class UID.
            </summary>
      <value>The related general SOP class UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.OriginalSpecializedSOPClassUID">
      <summary>
            Gets or sets the original specialized SOP class UID.
            </summary>
      <value>The original specialized SOP class UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.CodingSchemeIdentificationSequence">
      <summary>
            Gets or sets the coding scheme identification sequence.
            </summary>
      <value>The coding scheme identification sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.TimezoneOffsetFromUTC">
      <summary>
            Gets or sets the timezone offset from UTC.
            </summary>
      <value>The timezone offset from UTC.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.ContributingEquipmentSequence">
      <summary>
            Gets or sets the contributing equipment sequence.
            </summary>
      <value>The contributing equipment sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.InstanceNumber">
      <summary>
            Gets or sets the instance number.
            </summary>
      <value>The instance number.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.SOPInstanceStatus">
      <summary>
            Gets or sets the SOP instance status.
            </summary>
      <value>The SOP instance status.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.SOPAuthorizationDateAndTime">
      <summary>
            Gets or sets the SOP authorization date and time.
            </summary>
      <value>The SOP authorization date and time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.SOPAuthorizationComment">
      <summary>
            Gets or sets the SOP authorization comment.
            </summary>
      <value>The SOP authorization comment.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.AuthorizationEquipmentCertificationNumber">
      <summary>
            Gets or sets the authorization equipment certification number.
            </summary>
      <value>The authorization equipment certification number.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.DigitalSignatures">
      <summary>
            Gets or sets the digital signatures.
            </summary>
      <value>The digital signatures.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.EncryptedAttributesSequence">
      <summary>
            Gets or sets the encrypted attributes sequence.
            </summary>
      <value>The encrypted attributes sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.OriginalAttributesSequence">
      <summary>
            Gets or sets the original attributes sequence.
            </summary>
      <value>The original attributes sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SOPCommonModule.HL7StructuredDocumentReferenceSequence">
      <summary>
            Gets or sets the HL7 structured document reference sequence.
            </summary>
      <value>The HL7 structured document reference sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.RequestAttributes">
      <summary>
            Contains properties from the Imaging Service Request.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.RequestedProcedureID">
      <summary>
            Gets or sets the requested procedure ID.
            </summary>
      <value>The requested procedure ID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.AccessionNumber">
      <summary>
            Gets or sets the accession number.
            </summary>
      <value>The accession number.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.StudyInstanceUID">
      <summary>
            Gets or sets the study instance UID.
            </summary>
      <value>The study instance UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.ReferencedStudySequence">
      <summary>
            Gets or sets the referenced study sequence.
            </summary>
      <value>The referenced study sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.RequestedProcedureDescription">
      <summary>
            Gets or sets the requested procedure description.
            </summary>
      <value>The requested procedure description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.RequestedProcedureCodeSequence">
      <summary>
            Gets or sets the requested procedure code sequence.
            </summary>
      <value>The requested procedure code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.ReasonForTheRequestedProcedure">
      <summary>
            Gets or sets the reason for the requested procedure.
            </summary>
      <value>The reason for the requested procedure.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.ReasonForRequestedProcedureCodeSequence">
      <summary>
            Gets or sets the reason for requested procedure code sequence.
            </summary>
      <value>The reason for requested procedure code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.ScheduledProcedureStepID">
      <summary>
            Gets or sets the scheduled procedure step ID.
            </summary>
      <value>The scheduled procedure step ID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.ScheduledProcedureStepDescription">
      <summary>
            Gets or sets the scheduled procedure step description.
            </summary>
      <value>The scheduled procedure step description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.ScheduledProtocolCodeSequence">
      <summary>
            Gets or sets the scheduled protocol code sequence.
            </summary>
      <value>The scheduled protocol code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.ProtocolContextSequence">
      <summary>
            Gets or sets the protocol context sequence.
            </summary>
      <value>The protocol context sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.RequestAttributes.ContentItemModiferSequence">
      <summary>
            Gets or sets the content item modifer sequence.
            </summary>
      <value>The content item modifer sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ReferencedSOP">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.PresentationStateMaskModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.OrientationActions">
      <summary>
            Specifies an action that is to be applied to an image.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationActions.None">
      <summary>
            No action.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationActions.FlipHorz">
      <summary>
            Flip the image along the horizontal axis.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationActions.FlipVert">
      <summary>
            Flip the image along the vertical axis.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationActions.Rotate90">
      <summary>
            Rotate the image 90 degrees in the clockwise direction.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationActions.Rotate270">
      <summary>
            Rotate the image 270 degrees in the clockwise direction (or 90 degrees in the counter-clockwise direction).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.OrientationAxis">
      <summary>
            Specifies where the right or top of a 2D image is located in 3D space.
            </summary>
      <remarks>
        <para>
            The 3D space is defined from the perspective of a paient laying down a supine position (face up).
            The X axis goes in the direction from the patients right to the patients left.
            The Y axis goes from the patients from the patients anterior to the patients posterior.
            The Z axis goes from the patients feet to the patients head (inferior to superior).
            </para>
        <para>
            Used with <see cref="M:Leadtools.Dicom.Common.Extensions.OrientationManager.GetMajorAxisFromPatientRelativeDirectionCosine(System.Double,System.Double,System.Double)"></see></para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationAxis.Invalid">
      <summary>
            Invalid.  This is used for initialization.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationAxis.Right">
      <summary>
            The right side of the patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationAxis.Left">
      <summary>
            The left side of the patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationAxis.Anterior">
      <summary>
            The front side of the patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationAxis.Posterior">
      <summary>
            The back side of the patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationAxis.Inferior">
      <summary>
            Towards the feet of the paient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.OrientationAxis.Superior">
      <summary>
            Towards the head of the patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.Plane">
      <summary>
            Specifies an anatomical plane in 3D space.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.Plane.Oblique">
      <summary>
            Any plane passing through the body not parallel to one of the three primary
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.Plane.Axial">
      <summary>
            An imaginary plane that divides the body into superior and inferior parts
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.Plane.Sagittal">
      <summary>
            A vertical plane which passes from front to rear dividing the body into right and left sections.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.Plane.Coronal">
      <summary>
            Any vertical plane that divides the body into ventral and dorsal (belly and back) sections
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.OrientationConditionBase">
      <summary>
            An abstract class that is used to test if a condition is met by a <see cref="T:Leadtools.Dicom.DicomDataSet" /></summary>
      <remarks>
            Classes that derive from this class define a condition.  
            The <see cref="M:Leadtools.Dicom.Common.DataTypes.OrientationConditionBase.ApplyOrientation(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.Common.DataTypes.PlaneOrientation)" /> method returns true if the condition is met, and false otherwise.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.OrientationConditionBase.ApplyOrientation(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.Common.DataTypes.PlaneOrientation)">
      <summary>
            Returns true if the condition is met by the DicomDataSet parameter.
            </summary>
      <param name="ds">The <see cref="T:Leadtools.Dicom.DicomDataSet" /> set that is being tested for a condition.</param>
      <param name="orientation">The orientation to apply if the condition is met for the <paramref name="ds" /> parameter.</param>
      <returns>
            true if the condition is met for <paramref name="ds" />; otherwise, it is false.
            </returns>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition">
      <summary>
            Specifies a possible condition that may or may not be met by a <see cref="T:Leadtools.Dicom.DicomDataSet" />   
            The condition consists of a DICOM tag and value for the DICOM element containing that tag.  
            </summary>
      <remarks>
            This class allows an easy test to check if a <see cref="T:Leadtools.Dicom.DicomDataSet" /> contains a DICOM element with a specific tag and value.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition">TagValueOrientationCondition</see> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition.#ctor(System.Int64,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition">TagValueOrientationCondition</see> class.
            </summary>
      <param name="tag">The DICOM tag that must be present in the <see cref="T:Leadtools.Dicom.DicomDataSet" /> for the condition to be true.</param>
      <param name="tagValue">The value that the DICOM element is required to contain for the condition to be true.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition.ApplyOrientation(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.Common.DataTypes.PlaneOrientation)">
      <summary>
            Indicates if a specified condition is met by a <see cref="T:Leadtools.Dicom.DicomDataSet" />.
            </summary>
      <param name="ds">The <see cref="T:Leadtools.Dicom.DicomDataSet" /> set that is being tested for a condition.</param>
      <param name="orientation">The orientation to apply if the condition is met for <paramref name="ds" />.</param>
      <returns>
            true if the condition is met for <paramref name="ds" />; otherwise, it is false.
            </returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition.Tag">
      <summary>
            Gets or sets a DICOM tag that must be present in the <see cref="T:Leadtools.Dicom.DicomDataSet" /> for the condition to be true.
            </summary>
      <value>The tag.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition.TagValue">
      <summary>
            Gets or sets a value that the DICOM element is required to contain for the condition to be true.
            </summary>
      <value>The tag value.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation">
      <summary>
            Provides a condition, and a transformation to a 2D image that is to be applied if a specified condition is met.
            </summary>
      <remarks>
            This class is used with the <see cref="T:Leadtools.Dicom.Common.DataTypes.TagValueOrientationCondition" /> class.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.ToString">
      <summary>
            This member overrides <see cref="M:System.Object.ToString" /> and returns a descriptive string for the PlaneOrientation.
            </summary>
      <returns>A descriptive string for the PlaneOrientation.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.IsValid(Leadtools.Dicom.Common.DataTypes.Plane)">
      <summary>
            Indicates if <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Top" /> and <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Right" /> are valid combinations for <paramref name="plane" />.
            </summary>
      <param name="plane">The specified plane that is being verified as valid combination with <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Top" /> and <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Right" /></param>
      <returns>
            true if <paramref name="plane" /> is consistent with the combination of <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Top" /> and <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Right" /></returns>
      <noremarks />
      <noexample />
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Name">
      <summary>
            Gets or sets the descriptive, user-friendly name that is to be associated with the <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /></summary>
      <value>The descriptive, user-friendly name.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Top">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationAxis" /> that will be transformed to occupy the top of the 2D image if the <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Condition" /> is met.
            </summary>
      <value>The top <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationAxis" />.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Right">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationAxis" /> that will be transformed to the occupy the right of the 2D image if the <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Condition" /> is met.
            </summary>
      <value>The right <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationAxis" />.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Condition">
      <summary>
            Gets or sets the condition that must be met before the transformation is applied.
            </summary>
      <value>The condition to be met.</value>
      <remarks>
            If <see cref="M:Leadtools.Dicom.Common.DataTypes.OrientationConditionBase.ApplyOrientation(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.Common.DataTypes.PlaneOrientation)" /> returns true,
            then the transformation defined by <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Top" /> and <see cref="P:Leadtools.Dicom.Common.DataTypes.PlaneOrientation.Right" /> should be applied.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration">
      <summary>
            Provides three lists of conditions (one for each 3D axis) that can be applied to the 
            image contained in a <see cref="T:Leadtools.Dicom.DicomDataSet" /> if a specified condition is met.
            </summary>
      <remarks>
            This class is used with the <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetNewViewPerspective(Leadtools.RasterViewPerspective,System.Double[],Leadtools.Dicom.Common.DataTypes.PlaneOrientation)" /> methods and the <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)" /> method.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration"></see> class.
            </summary>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.IsValid">
      <summary>
            Verifies that the <see cref="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Axial" />, <see cref="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Coronal" />, and <see cref="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Sagittal" /> contain valid <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> entries.
            </summary>
      <returns>
            returns true if the <see cref="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Axial" />, <see cref="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Coronal" />, and <see cref="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Sagittal" /> contain valid <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> entries; otherwise, it is false.
            </returns>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Axial">
      <summary>
            A <see cref="T:Leadtools.RasterCollection`1" /> of <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> that are used only if the orientation of the <see cref="T:Leadtools.Dicom.DicomDataSet" /> is <see cref="T:Leadtools.Dicom.Common.DataTypes.Plane">Plane.Axial</see></summary>
      <value>The <see cref="T:Leadtools.RasterCollection`1" /> of <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> collection of axial orientations.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Coronal">
      <summary>
            A <see cref="T:Leadtools.RasterCollection`1" /> of <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> that are used only if the orientation of the <see cref="T:Leadtools.Dicom.DicomDataSet" /> is <see cref="T:Leadtools.Dicom.Common.DataTypes.Plane">Plane.Coronal</see></summary>
      <value>The <see cref="T:Leadtools.RasterCollection`1" /> of <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> collection of coronal orientations.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration.Sagittal">
      <summary>
            A <see cref="T:Leadtools.RasterCollection`1" /> of <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> that are used only if the orientation of the <see cref="T:Leadtools.Dicom.DicomDataSet" /> is <see cref="T:Leadtools.Dicom.Common.DataTypes.Plane">Plane.Sagittal</see></summary>
      <value>The <see cref="T:Leadtools.RasterCollection`1" /> of <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> collection of sagittal orientations.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)"></see>.
            </example>
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.HL7StructuredDocumentReference">
      <summary>
            Defines a mapping between HL7 instances identifiers of unencapsulated HL7 structured documents referenced from
            a DICOM instance.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.HL7StructuredDocumentReference.ReferencedSOPClassUID">
      <summary>
            Gets or sets the referenced SOP class UID.
            </summary>
      <value>The referenced SOP class UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.HL7StructuredDocumentReference.ReferencedSOPInstanceUID">
      <summary>
            Gets or sets the referenced SOP instance UID.
            </summary>
      <value>The referenced SOP instance UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.HL7StructuredDocumentReference.HL7InstanceIdentifier">
      <summary>
            Gets or sets the HL7 instance identifier.
            </summary>
      <value>The HL7 instance identifier.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.HL7StructuredDocumentReference.RetrieveURI">
      <summary>
            Gets or sets the retrieve URI.
            </summary>
      <value>The retrieve URI of the HL7 structured document.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.UI.NonInteractiveEditor">
      <summary>
            Provides and editor that doesn't display an interface. 
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.NonInteractiveEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method. If the <see cref="T:System.Drawing.Design.UITypeEditor" /> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.NullableDicomAgeValueConverter">
      <summary>
            Provides a type converter to convert a nullable DateTimeAgeValue to and from a string representation.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.NullableDicomAgeValueConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.NullableDicomAgeValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.NullableDicomAgeValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.NullableDicomAgeValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.SeriesBase">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MoveToNewPatient">
      <summary>
            Provides the necessary information to move a study to a new patient via the Patient Updater DICOM Service
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MoveToNewPatient.PatientId">
      <summary>
            Gets or sets the patient id.
            </summary>
      <value>
            The patient id.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MoveToNewPatient.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The patient name.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MoveToNewPatient.Sex">
      <summary>
            Gets or sets the patient sex.
            </summary>
      <value>
            The patient sex.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MoveToNewPatient.Birthdate">
      <summary>
            Gets or sets the patient birthdate.
            </summary>
      <value>
            The patient birthdate.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MoveToNewPatient.StudyInstanceUID">
      <summary>
            Gets or sets the study instance UID.
            </summary>
      <value>
            The study instance UID.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MoveToNewPatient.PatientToMerge">
      <summary>
            Gets or sets the patient to move study to.
            </summary>
      <value>
            The patient to move study to.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationStatus">
      <summary>
            Hold status information about a specific medica creation request.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationStatus.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationStatus" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationStatus.ExecutionStatus">
      <summary>
            Gets or sets the execution status.
            </summary>
      <value>The execution status of the media creation request.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationStatus.ExecutionStatusInfo">
      <summary>
            Gets or sets the execution status info.
            </summary>
      <value>Additional information about media creation execution status.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationStatus.TotalNumberOfPiecesOfMediaCreated">
      <summary>
            Gets or sets the total number of pieces of media created.
            </summary>
      <value>The total number of pieces of media that have been succesfully created.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationStatus.MediaCreationFailedSopSequence">
      <summary>
            Gets or sets the media creation failed sop sequence.
            </summary>
      <value>A list of items describing the SOP instances witch media creation failed.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationStatus.ReferencedStorageMediaSequence">
      <summary>
            Gets or sets the referenced storage media sequence.
            </summary>
      <value>A list of items describing the identifiers of all pieces of media create to satisfy the media
            creation request.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Validation.DicomDataSetValidator">
      <summary>
            Holds methods that validates a DicomDataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Validation.DicomDataSetValidator.Validate(Leadtools.Dicom.DicomDataSet,System.Boolean)">
      <summary>
            Validates the specified dataset.
            </summary>
      <param name="dataset">The dataset to validate.</param>
      <param name="continueOnError">If set to <c>true</c> continue of validation error, otherwise cancel validation.</param>
      <returns>A dictionary of the elements validates as the key and the result of the validation as the value.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PersonIdentification">
      <summary>
            Class that defines an item in a person identification sequence.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.PersonIdentification.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.PersonIdentification" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonIdentification.PersonIdentificationCodeSequence">
      <summary>
            Gets or sets the person identification code sequence.
            </summary>
      <value>The person identification code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonIdentification.PersonAddress">
      <summary>
            Gets or sets the person address.
            </summary>
      <value>The person address.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonIdentification.PersonTelephoneNumbers">
      <summary>
            Gets or sets the person telephone numbers.
            </summary>
      <value>The person telephone numbers.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonIdentification.InstitutionName">
      <summary>
            Gets or sets the name of the institution.
            </summary>
      <value>The name of the institution.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonIdentification.InstitutionAddress">
      <summary>
            Gets or sets the institution address.
            </summary>
      <value>The institution address.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonIdentification.InstitutionCodeSequence">
      <summary>
            Gets or sets the institution code sequence.
            </summary>
      <value>The institution code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.TextObject">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.GraphicLayer">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MACParameters">
      <summary>
            Provides properties that describe the parameters used to calculate a MAC for use in digital signatures.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MACParameters.MACIDNumber">
      <summary>
            Gets or sets the unique identification number.
            </summary>
      <value>The unique identification number used to identify this MACParameters item.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MACParameters.MACCalculationTransferSyntaxUID">
      <summary>
            Gets or sets the MAC calculation transfer syntax UID.
            </summary>
      <value>The MAC calculation transfer syntax UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MACParameters.MACAlgorithm">
      <summary>
            Gets or sets the MAC algorithm.
            </summary>
      <value>The MAC algorithm.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MACParameters.DataElements">
      <summary>
            Gets or sets the data elements.
            </summary>
      <value>The data elements used in creating the MAC.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MACParameters.MAC">
      <summary>
            Gets or sets the calculated MAC.
            </summary>
      <value>The calculated MC.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.GeneralSeriesModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.GeneralEquipmentModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid">
      <summary>
            Provides a user interface for editing the elements of a DICOM dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.Refresh">
      <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.AddCommand(System.String,System.EventHandler)">
      <summary>
            Adds a command to the property grid.
            </summary>
      <param name="name">The name of the command.</param>
      <param name="handler">The event handler that peforms the actions for the command.</param>
      <returns>The CommandID associated with the command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.AddCommand(System.String,System.Boolean,System.EventHandler)">
      <summary>
            Adds a command to the property grid.
            </summary>
      <param name="name">The name command.</param>
      <param name="enable">if set to <c>true</c> enable the command.</param>
      <param name="handler">The event handler that peforms the actions for the command.</param>
      <returns>The CommandID associated with the command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.RemoveCommand(System.ComponentModel.Design.CommandID)">
      <summary>
            Removes the command from the property grid.
            </summary>
      <param name="id">The CommandID of the command to remove.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.AddTags(System.Collections.Generic.List{System.Int64})">
      <summary>
            Adds a list of tags to the property grid.
            </summary>
      <param name="_Tags">The list of tags to add.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.ShowTagSelectionDialog">
      <summary>
            Shows the tag selection dialog.
            </summary>
      <returns>A list of tags selected by the user.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.AddSequenceItem">
      <summary>
            Add a DICOM sequence item to the currently selected item.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.DeleteTag">
      <summary>
            Deletes the currently selected tag.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.OnCreateControl">
      <summary>
            Raises the CreateControl method.
            </summary>
      <noexample />
      <remarks>
            This overridden method is used internall by the control.  It exposes no api to the user.
            </remarks>
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.DataSet">
      <summary>
            Gets or sets the dataset.
            </summary>
      <value>The dataset.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.ShowTagInfo">
      <summary>
            Gets or sets a value indicating whether show tag info.
            </summary>
      <value>
        <c>true</c> to show tag info; otherwise, <c>false</c>.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.DefaultTag">
      <summary>
            Gets or sets the default tag.
            </summary>
      <value>Specifies the default tag for the dataset.</value>
      <remarks>This tag will be initially selected when the dataset is assigned to the property grid.</remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.ShowCommands">
      <summary>
            Gets or sets a value indicating whether to show commands.
            </summary>
      <value>
        <c>true</c> to show commands; otherwise, <c>false</c>.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.ShowUsageImages">
      <summary>
            Gets or sets a value indicating whether to show usage images.
            </summary>
      <value>
        <c>true</c> ti show usage images; otherwise, <c>false</c>.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.Type1MandatoryImage">
      <summary>
            Gets or sets the image to display for type 1 mandatory elements.
            </summary>
      <value>The type 1 mandatory image.  ShowUsageImages needs to be true for this image to be visible.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.Type1ConditionalImage">
      <summary>
            Gets or sets the image to display for type 1 conditional elements..
            </summary>
      <value>The type 1 conditional image.  ShowUsageImages needs to be true for this image to be visible.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.Type2MandatoryImage">
      <summary>
            Gets or sets the image to display for type 2 mandatory elements..
            </summary>
      <value>The type 2 mandatory image.  ShowUsageImages needs to be true for this image to be visible.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.Type2ConditionalImage">
      <summary>
            Gets or sets the image to display for type 1 conditional elements..
            </summary>
      <value>The type 2 conditional image.  ShowUsageImages needs to be true for this image to be visible.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.Type3Image">
      <summary>
            Gets or sets the image to display for type 3 elements..
            </summary>
      <value>The type 3 mandatory image.  ShowUsageImages needs to be true for this image to be visible.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.CanAddSequenceItem">
      <summary>
            Gets a value indicating whether a DICOM sequence item can be added to the currently selected item.
            </summary>
      <value>
        <c>true</c> if this sequence item can be added; otherwise, <c>false</c>.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.CanAddTag">
      <summary>
            Gets a value indicating whether a DICOM tag can be added to the currently selected item.
            </summary>
      <value>
        <c>true</c> if this instance can add tag; otherwise, <c>false</c>.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.ReadOnly">
      <summary>
            Gets or sets a value indicating whether the tag items in the dataset can be edited.
            </summary>
      <value>
        <c>true</c> if the dataset can be edited; otherwise, <c>false</c>.</value>
      <noexample />
      <noremarks />
      <isnew>11/12/2010 2:36:30 PM</isnew>
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.AutoDisplayDescription">
      <summary>
            Gets or sets a value indicating whether automatically display DICOM element tag descriptions.
            </summary>
      <value>
        <c>true</c> if to auto display the description; otherwise, <c>false</c>.
            </value>
      <noexample />
      <remarks>The description can only be displayed if the DICOM element tag is in the LEADTOOLS DicomTag table. Elements
            not found will not have a description displayed.
            </remarks>
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.SelectedObject">
      <summary>
            Gets or sets the object for which the grid displays properties.
            </summary>
      <value>
      </value>
      <returns>
            The first object in the object list. If there is no currently selected object the return is null.
            </returns>
      <remarks>The Dataset property should be used instead of SelectedObject.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.SelectedObjects">
      <summary>
            Gets or sets the currently selected objects.
            </summary>
      <value>
      </value>
      <returns>
            An array of type <see cref="T:System.Object" />. The default is an empty array.
            </returns>
      <exception cref="T:System.ArgumentException">
            One of the items in the array of objects had a null value.
            </exception>
      <remarks>This property should be be used for this grid.</remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.PropertyInfo">
      <summary>
            Occurs when image information is requested for a property.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.Dicom.Common.Editing.Controls.DicomPropertyGrid.BeforeAddElement">
      <summary>
            Occurs before a dynamic property is created for a DICOM element.        
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.DigitalSignature">
      <summary>
            Holds information about a digital signature that is to be included in a DICOM dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.MACIDNumber">
      <summary>
            Gets or sets the unique identification number.
            </summary>
      <value>The unique identification number used to identify this MACParameters item.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.DigitalSignatureUID">
      <summary>
            Gets or sets the digital signature UID.
            </summary>
      <value>The digital signature UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.DigitalSignatureDateTime">
      <summary>
            Gets or sets the digital signature date time.
            </summary>
      <value>The digital signature date time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.CertificateType">
      <summary>
            Gets or sets the type of the certificate.
            </summary>
      <value>The type of the certificate.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.CertificateOfSigner">
      <summary>
            Gets or sets the certificate of signer.
            </summary>
      <value>The certificate of signer.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.Signature">
      <summary>
            Gets or sets the signature.
            </summary>
      <value>The signature.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.CertifiedTimestampType">
      <summary>
            Gets or sets the type of the certified timestamp.
            </summary>
      <value>The type of the certified timestamp.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.CertifiedTimestamp">
      <summary>
            Gets or sets the certified timestamp.
            </summary>
      <value>The certified timestamp.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignature.DigitalSignaturePurposeCodeSequence">
      <summary>
            Gets or sets the digital signature purpose code sequence.
            </summary>
      <value>The digital signature purpose code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.CodingSchemeIdentification">
      <summary>
            Contains properties that map values of Coding Scheme Designator to an external coding system.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodingSchemeIdentification.CodingSchemeDesignator">
      <summary>
            Gets or sets the coding scheme designator.
            </summary>
      <value>The coding scheme designator.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodingSchemeIdentification.CodingSchemeRegistry">
      <summary>
            Gets or sets the coding scheme registry.
            </summary>
      <value>The coding scheme registry.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodingSchemeIdentification.CodingSchemeUID">
      <summary>
            Gets or sets the coding scheme UID.
            </summary>
      <value>The coding scheme UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodingSchemeIdentification.CodingSchemeExternalID">
      <summary>
            Gets or sets the coding scheme external ID.
            </summary>
      <value>The coding scheme external ID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodingSchemeIdentification.CodingSchemeName">
      <summary>
            Gets or sets the name of the coding scheme.
            </summary>
      <value>The name of the coding scheme.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodingSchemeIdentification.CodingSchemeVersion">
      <summary>
            Gets or sets the coding scheme version.
            </summary>
      <value>The coding scheme version.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodingSchemeIdentification.CodingSchemeResponsibleOrganization">
      <summary>
            Gets or sets the coding scheme responsible organization.
            </summary>
      <value>The coding scheme responsible organization.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.CodeSequence">
      <summary>
            Encode concepts using code values and optional text meanings from coding schemes.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.CodeSequence.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodeSequence.CodeValue">
      <summary>
            Gets or sets the code value.
            </summary>
      <value>An identifier that is unambiguous within the Coding Scheme denoted by SchemeDesignator.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodeSequence.CodeSchemeDesignator">
      <summary>
            Gets or sets the code scheme designator.
            </summary>
      <value>Identifies the coding scheme in which the code for a term is defined.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodeSequence.CodingSchemeVersion">
      <summary>
            Gets or sets the coding scheme version.
            </summary>
      <value>Used to identify the version of a coding scheme if necessary to resolve ambiguity in the 
            code value or code meaning.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodeSequence.CodeMeaning">
      <summary>
            Gets or sets the code meaning.
            </summary>
      <value>Text which has meaning to a human and which conveys the meaning of the term defined 
            by the combination of code value and coding scheme designator.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.CodeSequence.EnhancedEncoding">
      <summary>
            Gets or sets the enhanced encoding.
            </summary>
      <value>Additional encoding values.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.SpatialTransformationModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.GraphicLayerModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.DisplayedAreaModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.PropertyValueEventArgs">
      <summary>
            Provides information for the GetElementValue and SetElementValue events.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.PropertyValueEventArgs.#ctor(Leadtools.Dicom.Common.Editing.DicomEditableProperty,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Editing.PropertyValueEventArgs" /> class.
            </summary>
      <param name="property">The property.</param>
      <param name="value">The value.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.PropertyValueEventArgs.Property">
      <summary>
            Gets the DICOM Element property.
            </summary>
      <value>The property.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.PropertyValueEventArgs.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.PropertyImageInfo">
      <summary>
            Provides additional information that can be associated with a DICOM element property.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.PropertyImageInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Editing.PropertyImageInfo" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.PropertyImageInfo.#ctor(System.Drawing.Image,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Editing.PropertyImageInfo" /> class.
            </summary>
      <param name="image">The image.</param>
      <param name="tooltip">The tooltip.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.PropertyImageInfo.Image">
      <summary>
            Gets or sets the image.
            </summary>
      <value>The image associated with the property.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.PropertyImageInfo.Tooltip">
      <summary>
            Gets or sets the tooltip.
            </summary>
      <value>The tooltip associated with the property.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.PropertyInfoEventArgs">
      <summary>
            Provides information for the PropertyInfo event.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.PropertyInfoEventArgs.#ctor(Leadtools.Dicom.DicomElement,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Editing.PropertyInfoEventArgs" /> class.
            </summary>
      <param name="element">The element.</param>
      <param name="value">The value.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.PropertyInfoEventArgs.Element">
      <summary>
            Gets the DICOM element.
            </summary>
      <value>The DICOM element this event refers to.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.PropertyInfoEventArgs.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The current of the DICOM element property.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.PropertyInfoEventArgs.PropertyImageInfo">
      <summary>
            Gets the property image info.
            </summary>
      <value>The property image info.</value>
      <remarks>Any PropertyInfo objects added to this list will be associated with the DICOM element property.</remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.ListTypeConverter">
      <summary>
            Provides a type converter to convert a generic list of a comma separated string list.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.ListTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.DicomAgeValueConverter">
      <summary>
            Provides a type converter to convert DicomAgeValue objects to and from various other representations.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.DicomAgeValueConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.DicomAgeValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.DicomAgeValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.DicomAgeValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergeStudy">
      <summary>
            Provides the necessary information to merge a study via the Patient Updater DICOM Service.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergeStudy.PatientId">
      <summary>
            Gets or sets the patient id associated with the study to merge.
            </summary>
      <value>
            The patient id.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergeStudy.StudyInstanceUID">
      <summary>
            Gets or sets the study instance UID of the study to merge.
            </summary>
      <value>
            The study instance UID.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergeStudy.PatientToMerge">
      <summary>
            Gets or sets the patient id of the patient to merge to.
            </summary>
      <value>
            The patient to merge.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.DeleteSeries">
      <summary>
            Provides the necessary information to delete a series via the Patient Updater DICOM Service.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.DeleteSeries.StudyInstanceUID">
      <summary>
            Gets or sets the study instance UID that the series belongs to.
            </summary>
      <value>
            The study instance UID.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.DeleteSeries.SeriesInstanceUID">
      <summary>
            Gets or sets the series instance UID to delete.
            </summary>
      <value>
            The series instance UID.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationFailedSop">
      <summary>
            Holds information about a failed media creation request.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationFailedSop.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationFailedSop" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationFailedSop.SopInstance">
      <summary>
            Gets or sets the sop instance reference.
            </summary>
      <value>The sop instance reference that describes the instance for which media creation failed.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationFailedSop.RequestedMediaApplicationProfile">
      <summary>
            Gets or sets the requested media application profile.
            </summary>
      <value>The requested media application profile.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationFailedSop.FailureReason">
      <summary>
            Gets or sets the failure reason.
            </summary>
      <value>The reason the media creation failed.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationFailedSop.FailureAttributes">
      <summary>
            Gets or sets the failure attributes.
            </summary>
      <value>The list of attributes associated with the FailureReason.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ImageBoxLayoutType">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PlaybackSequencing">
      <exclude />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PlaybackSequencing.Looping">
      <summary>
            Looping (1,2...n,1,2...n)
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PlaybackSequencing.Sweeping">
      <summary>
            Sweep (1,2,...n,n-1,...2)
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PlaybackSequencing.Stop">
      <summary>
            Stop (1,2...n)
            </summary>
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.HorizontalJustification">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.VerticalJustification">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.CineRunState">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientSexNeutered">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.Laterality">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.BodyPartExamined">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientPosition">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ValueType">
      <summary>
            Specifies the type of a content item.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Undefined">
      <summary>
            The type has not been defined.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Text">
      <summary>
            Text
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Numeric">
      <summary>
            Numeric
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Code">
      <summary>
            Code
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.DateTime">
      <summary>
            Datetime
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Date">
      <summary>
            Date
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Time">
      <summary>
            Time
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.UIDRef">
      <summary>
            UID Reference
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.PName">
      <summary>
            Person Name
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Composite">
      <summary>
            Composite
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Image">
      <summary>
            Image
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.WaveForm">
      <summary>
            Waveform
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.SCoord">
      <summary>
            Spatient coordinates
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.TCoord">
      <summary>
            Temporal coordinates
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ValueType.Container">
      <summary>
            Container
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientSex">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.TypeOfPatientId">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.YesNo">
      <summary>
            Specifies a yes or no value.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.YesNo.Undefined">
      <summary>
            Yes/No is undefined.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.YesNo.Yes">
      <summary>
            Yes value.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.YesNo.No">
      <summary>
            No value.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.SOPInstanceStatus">
      <summary>
            Flag that indicates the storage status of an SOP instance.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.SOPInstanceStatus.NotSpecified">
      <summary>
            The SOP instance has not special storage status.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.SOPInstanceStatus.Original">
      <summary>
            This is the primary SOP instance for the purpose of storage. The SOP instance has not yet been authorized for 
            diagnostic use.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.SOPInstanceStatus.AuthorizedOriginal">
      <summary>
            This is the primary SOP instance for the purpose of storage. The SOP instance has been authorized for diagnostic use.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.SOPInstanceStatus.AuthorizedCopy">
      <summary>
            This is a copy of the authorized original.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MACAlgorithm">
      <summary>
            Specifies the algorithm used in generating a MAC.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.MACAlgorithm.RipeMd160">
      <summary>
            RACE Integrity Primitives Evaluation Message Digest
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.MACAlgorithm.Md5">
      <summary>
            Message-Digest algorithm 5
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.MACAlgorithm.Sha1">
      <summary>
            Secure Hash Algorithm 1
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.AttributeModification">
      <summary>
            Specifies a reason as to why attributes were modified in a DICOM dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.AttributeModification.Coerce">
      <summary>
            Replace values during an import of media, or reconciliation against a master patient index.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.AttributeModification.Correct">
      <summary>
            Replace incorrect values.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.BlendingPosition">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ShutterShape">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationSizeMode">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.AnnotationUnits">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.GraphicType">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationLutShape">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.Synchronization">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.RequestPriority">
      <summary>
            Specifies the priority of a request.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.RequestPriority.Undefined">
      <summary>
            The priority has not been specified.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.RequestPriority.High">
      <summary>
            High priority.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.RequestPriority.Medium">
      <summary>
            Medium priority.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.RequestPriority.Low">
      <summary>
            Low priority.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MediaCreationActionType">
      <summary>
            Specifies the type of action to occur during a Media Creation N-ACTION-REQ.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.MediaCreationActionType.InitRequest">
      <summary>
            Initiate the Media Creation process.
            </summary>
      <remarks>A Media Creation Management SOP Instance needs to be created first before issuing this action.</remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.MediaCreationActionType.Cancel">
      <summary>
            Cancels the Media Creation process.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.IncludeNonDicomObjects">
      <summary>
            Specifies if the SCP should include in the media additional Non-DICOM information objects.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.IncludeNonDicomObjects.Undefined">
      <summary>
            No specified.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.IncludeNonDicomObjects.No">
      <summary>
            Do not include non-DICOM objects.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.IncludeNonDicomObjects.ForPhysician">
      <summary>
            Include objects for physician.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.IncludeNonDicomObjects.ForPatient">
      <summary>
            Include objects for patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.IncludeNonDicomObjects.ForTeaching">
      <summary>
            Include objects for teaching.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.IncludeNonDicomObjects.ForResearch">
      <summary>
            Include objects for research.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.FailureReason">
      <summary>
            Specifies the reason that media creation failed.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.Undefined">
      <summary>
            The reason for failure is undefined.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.ProcessingFailure">
      <summary>
            A general failure in processing the operation was encountered.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.NoSuchObjectInstance">
      <summary>
            One or more of the instances listed in the Referenced SOP Sequence (0008,1199) was not available.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.ReferencedSopClassNotSupported">
      <summary>
            A media creation has been requested for a SOP Instance with a SOP Class that is not supported by the SCP.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.ClassInstanceConflict">
      <summary>
            The SOP Class of an instance in the Referenced SOP Instance Sequence did not correspond to the SOP class of the SOP Instance stored at the SCP.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.MediaApplicationProfilesConflict">
      <summary>
            One or more of the Media Application Profiles referenced in the Reference SOP Sequence (0008,1199) are in 
            conflict (e.g. for the same request a STD-GEN-CD and a STD-GEN-DVD is referenced).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.MediaApplicationProfileInstanceConflict">
      <summary>
            The SOP Class of an instance in the Referenced SOP Sequence (0008,1199) did not correspond to a SOP class 
            permitted for the requested or supported Media Application Profiles.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.MediaApplicationProfileCompressionConflict">
      <summary>
            The profile for an instance in the Referenced SOP Sequence (0008,1199) specified lossy compression but Allow 
            Lossy Compression (2200,000F) has a value of NO.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.MediaApplicationProfileNotSupported">
      <summary>
            Media creation has been requested for an Application Profile that is not supported by the SCP.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.InstanceSizeExceeded">
      <summary>
            A single instance size exceeds the actual media capacity.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.MissingAttribute">
      <summary>
            A required Attribute (e.g., Patient ID) was not supplied. The missing Attribute(s) shall be listed in Failure 
            Attributes (2200,000E).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.FailureReason.MissingAttributeValue">
      <summary>
            A required Attribute Value (e.g., the Content Date for a Structured Report) was not supplied. The Attribute(s) 
            with missing values shall be listed in Failure Attributes (2200,000E).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo">
      <summary>
            Specifies additional information about media creation execution status.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.Undefined">
      <summary>
            No additional status information is available.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.NORMAL">
      <summary>
            The execution of the media creation happended as expected.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.CHECK_MCD_OP">
      <summary>
            The media creation request could not be accomplished sincethe device is not ready at this time and needs to be checked 
            by an operator (e.g., covers/doors opened or device jammed).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.CHECK_MCD_SRV">
      <summary>
            The media creation request could not be accomplished since the device is not ready at this time and needs to be 
            checked by a vendor service engineer (e.g., internal component failure).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.DIR_PROC_ERR">
      <summary>
            The DICOMDIR building process failed for some unspecified reason (e.g., mandatory attributes or values missing).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.DUPL_REF_INST">
      <summary>
            Duplicated instances in the Referenced SOP Sequence (0008,1199).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.INST_AP_CONFLICT">
      <summary>
            One or more of the elements in the Referenced SOP Sequence (0008,1199) are in conflict (e.g., the SOP Class 
            specified is not consistent with the requested Application Profile).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.INST_OVERSIZED">
      <summary>
            A single instance size exceeds the actual media capacity.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.INSUFFIC_MEMORY">
      <summary>
            There is not enough memory available to complete this request.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.MCD_BUSY">
      <summary>
            Media creation device is not available at this time, but should become ready without user intervention 
            (e.g the media creation device‘s buffer capacity is full). The SCU should retry later.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.MCD_FAILURE">
      <summary>
            Media creation device fails to operate.  This may depend on permanent or transient hardware failures 
            (e.g robot arm broken, DVD writer failed) or because it has been disabled by an operator.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.NO_INSTANCE">
      <summary>
            One or more of the SOP Instances in the Referenced SOP Sequence (0008,1199) are not available.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.NOT_SUPPORTED">
      <summary>
            One or more of the Application Profiles, and/or SOP Classes, referenced in the Referenced SOP Sequence (0008,1199) 
            are not supported by the SCP.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.OUT_OF_SUPPLIES">
      <summary>
            No more supplies (e.g., blank media, labeling ink) are available for the media creation device. Operator 
            intervention is required to replenish the supply.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.PROC_FAILURE">
      <summary>
            A general processing failure was encountered.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.QUEUED">
      <summary>
            This Media Creation Management instance is still in queue.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.SET_OVERSIZED">
      <summary>
            The file-set size exceeds the actual media capacity, and the device is not capable of splitting across multiple 
            pieces of media.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatusInfo.UNKNOWN">
      <summary>
            There is an unspecified problem.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ExecutionStatus">
      <summary>
            Specifies the execution status of the media creation request.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatus.Undefined">
      <summary>
            The execution status has not been specified.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatus.Idle">
      <summary>
            The SCP has created the media creation management instance, but it has not been yet scheduled.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatus.Pending">
      <summary>
            This media creation management instance is still scheduled for processing.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatus.Creating">
      <summary>
            This media creation management instance is being processed
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatus.Done">
      <summary>
            This media creation management instance has been successfully processed.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ExecutionStatus.Failure">
      <summary>
            This media creation management instance failed to be processed.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PixelRepresentation">
      <summary>
            Represents how the pixel values are stored.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PixelRepresentation.Undefined">
      <summary>
            Pixel representation is undefined.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PixelRepresentation.Unsigned_Integer">
      <summary>
            Pixel values is stored as unsigned integer.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PixelRepresentation.TwosComplement">
      <summary>
            Pixel values are stored as twos complement.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ReferencedDigitalSignature">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.UI.NullableDateTimeEditor">
      <summary>
            Provides a user interface than can edit a nullable date time value.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.NullableDateTimeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
      <param name="value">The object to edit.</param>
      <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.NullableDateTimeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method. If the <see cref="T:System.Drawing.Design.UITypeEditor" /> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.PersonNameListConverter">
      <summary>
            Provides a type converter to convert a list of PersonName objects to an from a string
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameListConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> should be called to find the properties of this object; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.DigitalSignatures">
      <summary>
            Hold information about digital signatures to be included in a dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignatures.MACParametersSequence">
      <summary>
            Gets or sets the MAC parameters sequence.
            </summary>
      <value>The MAC parameters sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DigitalSignatures.DigitalSignaturesSequence">
      <summary>
            Gets or sets the digital signatures sequence.
            </summary>
      <value>The digital signatures sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.StudyBase">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ModalityDescriptor">
      <summary>
            Manages descriptions for DICOM modalities.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.ModalityDescriptor.GetModalityDescription(Leadtools.Dicom.Common.DataTypes.ModalityType)">
      <summary>
            Gets the modality description.
            </summary>
      <param name="modality">The modality.</param>
      <returns>A description of the modality.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.ModalityDescriptor.SetModalityDescription(Leadtools.Dicom.Common.DataTypes.ModalityType,System.String)">
      <summary>
            Sets the modality description.
            </summary>
      <param name="modality">The modality.</param>
      <param name="description">The description of the modality.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.ModalityDescriptor.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the modality descriptions.
            </summary>
      <returns>An IEnumerator object that can be used to iterate throught the modality descriptions.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.StructuredDisplay.SDImageBox">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ImageBox">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.NotifyPropertyChanged">
      <summary>
            Base class form implementing property change notification.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.NotifyPropertyChanged.Reset">
      <summary>
            Resets this instance.
            </summary>
      <noexample />
      <remarks>
            After this intance has been reset the object will no longer be consider dirty.
            </remarks>
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.NotifyPropertyChanged.FirePropertyChanged(System.String)">
      <summary>
            Fires the property changed event.
            </summary>
      <param name="propertyName">Name of the property that changed.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.NotifyPropertyChanged.SetValue``1(``0@,``0,System.String)">
      <summary>
            Sets the property values and fires a notify property change event if required.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="destination">The output variable to be updated with the new value.</param>
      <param name="value">The value of the property.</param>
      <param name="name">The name of the property.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.NotifyPropertyChanged.TrackChanges">
      <summary>
            Gets or sets a value indicating whether track changes to this object.
            </summary>
      <value>
        <c>true</c> if object is tracking changes; otherwise, <c>false</c>.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.NotifyPropertyChanged.IsDirty">
      <summary>
            Gets a value indicating whether this instance is dirty.
            </summary>
      <value>
        <c>true</c> if this instance is dirty; otherwise, <c>false</c>.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="E:Leadtools.Dicom.Common.DataTypes.NotifyPropertyChanged.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ImageBox.PreferredPlaybackSequencing">
      <summary>
            Gets or sets the preferred playback sequencing.
            </summary>
      <value>The preferred playback sequencing.</value>
      <remarks>
            Describes the preferred playback sequencing for the Image Box.  Overrides any Preferred Playback
            Sequencing (0018,1244) value in the image objects being displayed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ImageBox.RecommendedDisplayFrameRate">
      <summary>
            Gets or sets the recommended display frame rate.
            </summary>
      <value>The recommended display frame rate.</value>
      <remarks>
            Recommended rate at which the frames of a multiframe image shall be displayed, in frames/second.
            Shall have a value greater than zero. Overrides any Recommended Display Frame Rate (0008,2144)
            value in the image objects being displayed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ImageBox.CineRelativeToRealTime">
      <summary>
            Gets or sets the cine relative to real time.
            </summary>
      <value>The cine relative to real time.</value>
      <remarks>
            A positive dimensionless floating point numeric factor equal to playback rate divided by
            acquisition rate.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.StructuredDisplay.BasicStructuredDisplay">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.SeriesInstanceReference">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ProtocolContext">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.PresentationStateShutterModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.DisplayedAreaSelection">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PerformedProcedureStepSummary">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.BeforeAddTagDelegate">
      <summary>
            Optional delegate to be call before class information is added to dataset.
            </summary>
      <param name="parent">The list of parents for the tag.  This will contain information if the tag is located in a sequence.</param>
      <param name="data">The value of tag.</param>
      <param name="tag">The tag code.</param>
      <returns>Return true to add the tag to the dataset, false otherwise.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.DicomExtensions">
      <summary>
            Provides extension methods for LEADTOOLS DicomDataSet.
            </summary>
      <noexample />
      <noremarks />
      <summary>
            This class is used to provided extension methods to the Leadtools.Dicom classes.
            </summary>
      <summary>
            This class is used to provided extension methods to the Leadtools.Dicom classes.
            </summary>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetGroup(System.Int64)">
      <summary>
            Gets the group.
            </summary>
      <param name="tag">The tag.</param>
      <returns>The group number for the DICOM tag.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetElement(System.Int64)">
      <summary>
            Gets the element.
            </summary>
      <param name="tag">The tag.</param>
      <returns>The element number for the DICOM tag.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.Get(Leadtools.Dicom.DicomDataSet,System.Object[])">
      <summary>
            Gets the specified data from the the DICOM dataset and assigns it the corresponding property in each object in the instances array.
            </summary>
      <param name="ds">The dataset to read the information from.</param>
      <param name="instances">The instances to update with dicom information.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.Get``1(Leadtools.Dicom.DicomDataSet)">
      <summary>
            Gets the specified data from the DICOM dataset and assigns it in a new instance of T.
            </summary>
      <typeparam name="T">The type of data to get from the DICOM dataset.</typeparam>
      <param name="ds">The data set to read the information from.</param>
      <returns>A new instance of T with the information from the DICOM dataset.</returns>
      <example>For an example refer to <see cref="T:Leadtools.Dicom.Common.Extensions.ElementAttribute" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.Set(Leadtools.Dicom.DicomDataSet,System.Object[])">
      <summary>
            Sets the information in the dataset from the specified class instances.
            </summary>
      <param name="ds">The dataset to set information into.</param>
      <param name="instances">The instances that have the correct attributes.</param>
      <example>For an example refer to <see cref="T:Leadtools.Dicom.Common.Extensions.ElementAttribute" /></example>
      <remarks>Instances have to be defined with the correct <see cref="T:Leadtools.Dicom.Common.Extensions.ElementAttribute" />.  Any properties 
            not defined with this attribute will be ignored.
            </remarks>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.Set(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.Common.Extensions.BeforeAddTagDelegate,System.Object[])">
      <summary>
            Sets the information in the dataset from the specified class instances.
            </summary>
      <param name="ds">The dataset to set information into.</param>
      <param name="OnBeforeAdd">The delegate to call before adding the element to the dataset.</param>
      <param name="instances">The instances that have the correct attributes.</param>
      <remarks>The delegate can return false to disable adding the element to the dataset.</remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.Set(Leadtools.Dicom.DicomDataSet,System.Boolean,System.Object[])">
      <summary>
            Sets the information in the dataset from the specified class instances.
            </summary>
      <param name="ds">The datasets to set information into.</param>
      <param name="addOptional">if set to <c>true</c> add optional elements from the class instance.</param>
      <param name="instances">The instances that have the correct attributes.</param>
      <example>
        <para>This example omits optional items from the dataset.</para>
        <code lang="VB">      Public Class PatientInfoTest
         Private _PatientName As PersonName

         &lt;Element(DicomTag.PatientName, Optional := True), TypeConverter(GetType(PersonNameConverter))&gt; _
         Public Property PatientName() As PersonName
            Get
               Return _PatientName
            End Get
            Set
               _PatientName = Value
            End Set
         End Property

         Private _PatientID As String
         &lt;Element(DicomTag.PatientID, Optional := False)&gt; _
         Public Property PatientID() As String
            Get
               Return _PatientID
            End Get
            Set
               _PatientID = Value
            End Set
         End Property
      End Class

      &lt;Test&gt; _
      Public Sub OptionalTest()
         Dim info As PatientInfoTest = New PatientInfoTest()

         ' Initialize DICOM engine
         DicomEngine.Startup()

         Dim ds As DicomDataSet = New DicomDataSet()

         ' Initialize empty dataset
         ds.Initialize(DicomClassType.Undefined, DicomDataSetInitializeFlags.None)

         '
         ' Initialize Patient Information
         '
         info.PatientName = New PersonName("LAST^FIRST")
         info.PatientID = "123456"

         '
         ' Set the patient information
         '
         ds.Set(False,info)

         '
         ' Patient Name should't exist since we didn't add optional elements
         '
         Dim element As DicomElement = ds.FindFirstElement(Nothing, DicomTag.PatientName, False)

         If element Is Nothing Then
            Console.WriteLine("Patient Name not added")
         End If
         DicomEngine.Shutdown()
      End Sub
</code>
        <code lang="CS">        public class PatientInfoTest
        {
            private PersonName _PatientName;

            [Element(DicomTag.PatientName, Optional = true)]
            [TypeConverter(typeof(PersonNameConverter))]
            public PersonName PatientName
            {
                get { return _PatientName; }
                set { _PatientName = value; }
            }

            private string _PatientID;
            [Element(DicomTag.PatientID, Optional = false)]
            public string PatientID
            {
                get { return _PatientID; }
                set { _PatientID = value; }
            }
        }        


        public void OptionalTest()
        {            
            PatientInfoTest info = new PatientInfoTest();

            // Initialize DICOM engine
            DicomEngine.Startup();

            DicomDataSet ds = new DicomDataSet();

            // Initialize empty dataset
            ds.Initialize(DicomClassType.Undefined, DicomDataSetInitializeFlags.None);            

            //
            // Initialize Patient Information
            //
            info.PatientName = new PersonName("LAST^FIRST");
            info.PatientID = "123456";

            //
            // Set the patient information
            //
            ds.Set(false,info);

            //
            // Patient Name should't exist since we didn't add optional elements
            //
            DicomElement element = ds.FindFirstElement(null, DicomTag.PatientName, false);

            if (element == null)
                Console.WriteLine("Patient Name not added");
            DicomEngine.Shutdown();
        }
</code>
        <!--ParsingSample.OptionalCallback-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetNewViewPerspective(Leadtools.RasterViewPerspective,System.Double[],Leadtools.Dicom.Common.DataTypes.PlaneOrientation)">
      <summary>
            Gets a new <see cref="T:Leadtools.RasterViewPerspective" /> 
            that results from applying a <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> to a given <see cref="T:Leadtools.RasterViewPerspective" /> and two given direction cosine vectors.
            </summary>
      <param name="viewPerspectiveOriginal">The input <see cref="T:Leadtools.RasterViewPerspective" /> to which the <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> will be applied.</param>
      <param name="imageOrientationVectors">The row and column orientation vectors (or direction cosine vectors) that apply to <paramref name="viewPerspectiveOriginal" /></param>
      <param name="po">A <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> that is applied to the original <see cref="T:Leadtools.RasterViewPerspective" /></param>
      <returns>
            The new <see cref="T:Leadtools.RasterViewPerspective" /> that results from having the <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> applied.
            </returns>
      <remarks>
            The input view perspective is define by two values: the original <see cref="T:Leadtools.RasterViewPerspective" /> (<paramref name="viewPerspectiveOriginal" />),
            and a row and column orientation vector (<paramref name="imageOrientationVectors" />).  This method returns the new <see cref="T:Leadtools.RasterViewPerspective" /> that results
            from applying a <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> to the input view perpsective.
            </remarks>
      <example>
        <para>This example does the following:
            <list><item>Creates a coronal PlaneOrientation that corresponds to a horizontal flip</item><item>Defines orientation vectors that corresonds to a coronal slice</item><item>Applies the above to a view perspective, and returns the resulting view perspective</item></list></para>
        <code lang="VB">      Public Sub GetNewViewPerspectiveExample()
         ' Create a new coronal PlaneOrientation that corresponds to a horizontal flip
         Dim poCoronal As New PlaneOrientation()
         poCoronal.Name = "Coronal or Frontal"

         ' This corresponds to a horizontal flip
         poCoronal.Top = OrientationAxis.Inferior
         poCoronal.Right = OrientationAxis.Right

         ' This condition is ignored
         Dim condition As New TagValueOrientationCondition(DicomTag.ImageOrientationPatient, Nothing)
         poCoronal.Condition = condition

         ' This specifies a row and column orientation vector that correspond to a coronal slice
         ' Row: (1,0,0)
         ' Col: (0,0,-1)
         Dim imageOrientationVectors() As Double = {1, 0, 0, 0, 0, -1}

         ' Find the new view perspective
         Dim newViewPerspective As RasterViewPerspective = DicomExtensions.GetNewViewPerspective(RasterViewPerspective.TopLeft, imageOrientationVectors, poCoronal)

         ' New view perspective should be BottomLeft
         MessageBox.Show("newViewPerspective should be BottomLeft" &amp; Constants.vbLf &amp; "Actual newViewPerspective is " &amp; newViewPerspective.ToString())
      End Sub</code>
        <code lang="CS">      public void GetNewViewPerspectiveExample()
      {
         // Create a new coronal PlaneOrientation that corresponds to a horizontal flip
         PlaneOrientation poCoronal = new PlaneOrientation();
         poCoronal.Name = "Coronal or Frontal";

         // This corresponds to a horizontal flip
         poCoronal.Top = OrientationAxis.Inferior;
         poCoronal.Right = OrientationAxis.Right;

         // This condition is ignored
         TagValueOrientationCondition condition = new TagValueOrientationCondition(DicomTag.ImageOrientationPatient, null);
         poCoronal.Condition = condition;

         // This specifies a row and column orientation vector that correspond to a coronal slice
         // Row: (1,0,0)
         // Col: (0,0,-1)
         double[] imageOrientationVectors = new double[6] { 1, 0, 0, 0, 0, -1 };

         // Find the new view perspective
         RasterViewPerspective newViewPerspective = DicomExtensions.GetNewViewPerspective(RasterViewPerspective.TopLeft, imageOrientationVectors, poCoronal);

         // New view perspective should be BottomLeft
         MessageBox.Show("newViewPerspective should be BottomLeft\nActual newViewPerspective is " + newViewPerspective.ToString());
      }</code>
        <!--DicomExtensions.GetNewViewPerspective-->
      </example>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetNewViewPerspective(Leadtools.Dicom.DicomDataSet,Leadtools.RasterViewPerspective,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)">
      <summary>
            Gets a new <see cref="T:Leadtools.RasterViewPerspective" /> 
            that results from applying a <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration" /> to a given <see cref="T:Leadtools.RasterViewPerspective" />.
            </summary>
      <param name="ds">The <see cref="T:Leadtools.Dicom.DicomDataSet" /> that contains the image orientation vectors</param>
      <param name="currentViewPerspective">The input <see cref="T:Leadtools.RasterViewPerspective" /> to which the <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> will be applied.</param>
      <param name="orientation">An <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration" /> that will be applied to the current view perpspective. </param>
      <returns>
      </returns>
      <remarks>
        <para>
            This overload gets the image orientation vectors from the <paramref name="ds" />.
            </para>
            The input view perspective is defined by two values: the original <see cref="T:Leadtools.RasterViewPerspective" /> (<paramref name="viewPerspectiveOriginal" />),
            and a row and column orientation vector (which are read from the <paramref name="ds" /> by searching for the <see cref="T:Leadtools.Dicom.DicomElement" /> 
            that has a tag of <see cref="F:Leadtools.Dicom.DicomTag.ImageOrientationPatient" /> which contains the orientation vectors.).  
            This method returns the new <see cref="T:Leadtools.RasterViewPerspective" /> that results
            from applying a <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration" /> to the input view perspective.  Note that the <paramref name="orientation" /> contains three lists of 
            conditions (one for each 3D axis) that can be applied to the 
            image contained in the <paramref name="ds" /> if the condition is met.
            </remarks>
      <example>
        <para>This example does the following:
            <list><item>Loads a DICOM dataset that contains orientation vectors that orient it as a coronal slice</item><item>Creates an OrientationConfiguration that contains a coronal PlaneOrientation that corresponds to a horizontal flip</item><item>Applies the above to a view perspective, and returns the resulting view perspective</item></list></para>
        <code lang="VB">      Public Sub GetNewViewPerspectiveExample2()
         Dim dicomFileCoronal As String = Path.Combine(LEAD_VARS.ImagesDir, "image3.dcm")
         Dim ds As New DicomDataSet()
         ds.Load(dicomFileCoronal, DicomDataSetLoadFlags.None)

         ' Create a new coronal PlaneOrientation that corresponds to a horizontal flip
         Dim poCoronal As New PlaneOrientation()
         poCoronal.Name = "Coronal or Frontal"
         poCoronal.Top = OrientationAxis.Inferior
         poCoronal.Right = OrientationAxis.Right
         poCoronal.Condition = New TagValueOrientationCondition(DicomTag.ImageOrientationPatient, Nothing)
         If (Not poCoronal.IsValid(Plane.Coronal)) Then
            MessageBox.Show("Invalid PlaneOrientation for Coronal")
            Return
         End If

         ' Create a new sagittal PlaneOrientation that corresponds to a Rotate90
         Dim poSaggital As New PlaneOrientation()
         poSaggital.Name = "Saggital"
         poSaggital.Top = OrientationAxis.Anterior
         poSaggital.Right = OrientationAxis.Inferior
         poSaggital.Condition = New TagValueOrientationCondition(0, Nothing)
         If (Not poSaggital.IsValid(Plane.Sagittal)) Then
            MessageBox.Show("Invalid PlaneOrientation for Sagittal")
            Return
         End If

         ' Create a new Axial that corresponds to a Rotate180
         Dim poAxial As New PlaneOrientation()
         poAxial.Name = "Axial"
         poAxial.Top = OrientationAxis.Posterior
         poAxial.Right = OrientationAxis.Left
         poAxial.Condition = New TagValueOrientationCondition(0, Nothing)
         If (Not poAxial.IsValid(Plane.Axial)) Then
            MessageBox.Show("Invalid PlaneOrientation for Axial")
            Return
         End If

         ' Setup the OrientationConfiguration
         Dim oc As New OrientationConfiguration()
         oc.Coronal.Add(poCoronal)
         oc.Sagittal.Add(poSaggital)
         oc.Axial.Add(poAxial)
         If (Not oc.IsValid()) Then
            MessageBox.Show("Invalid OrientationConfiguration")
            Return
         End If

         ' Find the new view perspective
         Dim newViewPerspective As RasterViewPerspective = ds.GetNewViewPerspective(RasterViewPerspective.TopLeft, oc)

         ' New view perspective should be BottomLeft
         MessageBox.Show("newViewPerspective should be BottomLeft" &amp; Constants.vbLf &amp; "Actual newViewPerspective is " &amp; newViewPerspective.ToString())
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetNewViewPerspectiveExample2()
      {
         DicomEngine.Startup();
         string dicomFileCoronal = Path.Combine(LEAD_VARS.ImagesDir,"image1.dcm");
         DicomDataSet ds = new DicomDataSet();
         ds.Load(dicomFileCoronal, DicomDataSetLoadFlags.None);

         // Create a new coronal PlaneOrientation that corresponds to a horizontal flip
         PlaneOrientation poCoronal = new PlaneOrientation();
         poCoronal.Name = "Coronal or Frontal";
         poCoronal.Top = OrientationAxis.Inferior;
         poCoronal.Right = OrientationAxis.Right;
         poCoronal.Condition = new TagValueOrientationCondition(DicomTag.ImageOrientationPatient, null);
         if (!poCoronal.IsValid(Plane.Coronal))
         {
            MessageBox.Show("Invalid PlaneOrientation for Coronal");
            return;
         }

         // Create a new sagittal PlaneOrientation that corresponds to a Rotate90
         PlaneOrientation poSaggital = new PlaneOrientation();
         poSaggital.Name = "Saggital";
         poSaggital.Top = OrientationAxis.Anterior;
         poSaggital.Right = OrientationAxis.Inferior;
         poSaggital.Condition = new TagValueOrientationCondition(0, null);
         if (!poSaggital.IsValid(Plane.Sagittal))
         {
            MessageBox.Show("Invalid PlaneOrientation for Sagittal");
            return;
         }

         // Create a new Axial that corresponds to a Rotate180
         PlaneOrientation poAxial = new PlaneOrientation();
         poAxial.Name = "Axial";
         poAxial.Top = OrientationAxis.Posterior;
         poAxial.Right = OrientationAxis.Left;
         poAxial.Condition = new TagValueOrientationCondition(0, null);
         if (!poAxial.IsValid(Plane.Axial))
         {
            MessageBox.Show("Invalid PlaneOrientation for Axial");
            return;
         }

         // Setup the OrientationConfiguration
         OrientationConfiguration oc = new OrientationConfiguration();
         oc.Coronal.Add(poCoronal);
         oc.Sagittal.Add(poSaggital);
         oc.Axial.Add(poAxial);
         if (!oc.IsValid())
         {
            MessageBox.Show("Invalid OrientationConfiguration");
            return;
         }

         // Find the new view perspective
         RasterViewPerspective newViewPerspective = ds.GetNewViewPerspective(RasterViewPerspective.TopLeft, oc);

         // New view perspective should be BottomLeft
         MessageBox.Show("newViewPerspective should be BottomLeft\nActual newViewPerspective is " + newViewPerspective.ToString());

         DicomEngine.Shutdown();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--DicomExtensions.GetNewViewPerspective2-->
      </example>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.GetImage(Leadtools.Dicom.DicomDataSet,Leadtools.Dicom.DicomElement,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.Dicom.DicomGetImageFlags,Leadtools.Dicom.Common.DataTypes.OrientationConfiguration)">
      <summary>
            Returns the <see cref="T:Leadtools.RasterImage" /> contained in the <see cref="T:Leadtools.Dicom.DicomDataSet" />, but with the <see cref="T:Leadtools.RasterViewPerspective" /> changed accordingly from 
            applying a <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> to a given <see cref="T:Leadtools.RasterViewPerspective" />.
            </summary>
      <param name="ds">The <see cref="T:Leadtools.Dicom.DicomDataSet" /> that contains the image orientation vectors</param>
      <param name="element">
            An item in the Data Set.
            </param>
      <param name="index">
            The zero-based index of the frame to load.
            </param>
      <param name="bitsPerPixel">
            Value that represents the resulting image pixel depth. Possible values are:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>0</term><description>Keep the original file's pixel depth (do not convert).</description></item><item><term>1 to 8</term><description>The specified bits per pixel in the resulting image.</description></item><item><term>12</term><description>12 bits per pixel in the resulting image.</description></item><item><term>16</term><description>16 bits per pixel in the resulting image.</description></item><item><term>24</term><description>24 bits per pixel in the resulting image.</description></item><item><term>32</term><description>32 bits per pixel in the resulting image.</description></item></list></param>
      <param name="order">
            This value is ignored.
            </param>
      <param name="flags">
            Flags that control the behaviour of this method.
            </param>
      <param name="orientation">An <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationConfiguration" /> that will be applied to the current view perpspective. </param>
      <returns>
            The image of a Pixel Data element.
            </returns>
      <remarks>
        <para>
            This method will load any image from <paramref name="ds" />, using <paramref name="element" /> as the parent element to begin the search,
            where the element searched for is the <see cref="F:Leadtools.Dicom.DicomTag.PixelData" /> element.  The resulting image has its <see cref="T:Leadtools.RasterViewPerspective" /> changed accordingly from 
            applying a <see cref="T:Leadtools.Dicom.Common.DataTypes.PlaneOrientation" /> to a given <see cref="T:Leadtools.RasterViewPerspective" />.
            </para>
        <para>
            The input view perspective is define by two values: the original <see cref="T:Leadtools.RasterViewPerspective" /> contained in <paramref name="ds" />,
            and a row and column orientation vector (which are read from the <paramref name="ds" /> by searching for the <see cref="T:Leadtools.Dicom.DicomElement" /> 
            that has a tag of <see cref="F:Leadtools.Dicom.DicomTag.ImageOrientationPatient" /> which contains the orientation vectors.).
            </para>
        <para>
            Note that the <paramref name="orientation" /> contains three lists of 
            conditions (one for each 3D axis) that can be applied to the 
            image contained in the <paramref name="ds" /> if the condition is met.
            </para>
      </remarks>
      <example>
        <para>This example does the following:
            <list><item>Loads a DICOM dataset that contains orientation vectors that orient it as a coronal slice</item><item>Creates an OrientationConfiguration that contains a coronal PlaneOrientation that corresponds to a horizontal flip</item><item>Gets the image from the DICOM dataset and modifies the view perpsective to reflect OrientationConfiguration</item></list></para>
        <code lang="VB">      Public Sub GetImageExample()
         Dim dicomFileCoronal As String = Path.Combine(LEAD_VARS.ImagesDir, "image3.dcm")
         Dim ds As New DicomDataSet()
         ds.Load(dicomFileCoronal, DicomDataSetLoadFlags.None)

         ' Create a new coronal PlaneOrientation that corresponds to a horizontal flip
         Dim poCoronal As New PlaneOrientation()
         poCoronal.Name = "Coronal or Frontal"
         poCoronal.Top = OrientationAxis.Inferior
         poCoronal.Right = OrientationAxis.Right
         poCoronal.Condition = New TagValueOrientationCondition(DicomTag.ImageOrientationPatient, Nothing)
         If (Not poCoronal.IsValid(Plane.Coronal)) Then
            MessageBox.Show("Invalid PlaneOrientation for Coronal")
            Return
         End If

         ' Create a new sagittal PlaneOrientation that corresponds to a Rotate90
         Dim poSaggital As New PlaneOrientation()
         poSaggital.Name = "Saggital"
         poSaggital.Top = OrientationAxis.Anterior
         poSaggital.Right = OrientationAxis.Inferior
         poSaggital.Condition = New TagValueOrientationCondition(0, Nothing)
         If (Not poSaggital.IsValid(Plane.Sagittal)) Then
            MessageBox.Show("Invalid PlaneOrientation for Sagittal")
            Return
         End If

         ' Create a new Axial that corresponds to a Rotate180
         Dim poAxial As New PlaneOrientation()
         poAxial.Name = "Axial"
         poAxial.Top = OrientationAxis.Posterior
         poAxial.Right = OrientationAxis.Left
         poAxial.Condition = New TagValueOrientationCondition(0, Nothing)
         If (Not poAxial.IsValid(Plane.Axial)) Then
            MessageBox.Show("Invalid PlaneOrientation for Axial")
            Return
         End If

         ' Setup the OrientationConfiguration
         Dim oc As New OrientationConfiguration()
         oc.Coronal.Add(poCoronal)
         oc.Sagittal.Add(poSaggital)
         oc.Axial.Add(poAxial)
         If (Not oc.IsValid()) Then
            MessageBox.Show("Invalid OrientationConfiguration")
            Return
         End If

         ' Find the image from the dataset with the new view perspective
         ' RasterViewPerspective newViewPerspective = ds.GetNewViewPerspective(RasterViewPerspective.TopLeft, oc);
         Dim image As RasterImage = ds.GetImage(Nothing, 0, 0, RasterByteOrder.Gray, DicomGetImageFlags.None, oc)

         ' New view perspective should be BottomLeft
         Dim newViewPerspective As RasterViewPerspective = image.ViewPerspective
         MessageBox.Show("newViewPerspective should be BottomLeft" &amp; Constants.vbLf &amp; "Actual newViewPerspective is " &amp; newViewPerspective.ToString())
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetImageExample()
      {
         DicomEngine.Startup();
         string dicomFileCoronal = Path.Combine(LEAD_VARS.ImagesDir ,"Image3.dcm");
         DicomDataSet ds = new DicomDataSet();
         ds.Load(dicomFileCoronal, DicomDataSetLoadFlags.None);

         // Create a new coronal PlaneOrientation that corresponds to a horizontal flip
         PlaneOrientation poCoronal = new PlaneOrientation();
         poCoronal.Name = "Coronal or Frontal";
         poCoronal.Top = OrientationAxis.Inferior;
         poCoronal.Right = OrientationAxis.Right;
         poCoronal.Condition = new TagValueOrientationCondition(DicomTag.ImageOrientationPatient, null);
         if (!poCoronal.IsValid(Plane.Coronal))
         {
            MessageBox.Show("Invalid PlaneOrientation for Coronal");
            return;
         }

         // Create a new sagittal PlaneOrientation that corresponds to a Rotate90
         PlaneOrientation poSaggital = new PlaneOrientation();
         poSaggital.Name = "Saggital";
         poSaggital.Top = OrientationAxis.Anterior;
         poSaggital.Right = OrientationAxis.Inferior;
         poSaggital.Condition = new TagValueOrientationCondition(0, null);
         if (!poSaggital.IsValid(Plane.Sagittal))
         {
            MessageBox.Show("Invalid PlaneOrientation for Sagittal");
            return;
         }

         // Create a new Axial that corresponds to a Rotate180
         PlaneOrientation poAxial = new PlaneOrientation();
         poAxial.Name = "Axial";
         poAxial.Top = OrientationAxis.Posterior;
         poAxial.Right = OrientationAxis.Left;
         poAxial.Condition = new TagValueOrientationCondition(0, null);
         if (!poAxial.IsValid(Plane.Axial))
         {
            MessageBox.Show("Invalid PlaneOrientation for Axial");
            return;
         }

         // Setup the OrientationConfiguration
         OrientationConfiguration oc = new OrientationConfiguration();
         oc.Coronal.Add(poCoronal);
         oc.Sagittal.Add(poSaggital);
         oc.Axial.Add(poAxial);
         if (!oc.IsValid())
         {
            MessageBox.Show("Invalid OrientationConfiguration");
            return;
         }

         // Find the image from the dataset with the new view perspective
         // RasterViewPerspective newViewPerspective = ds.GetNewViewPerspective(RasterViewPerspective.TopLeft, oc);
         RasterImage image = ds.GetImage(null, 0, 0, RasterByteOrder.Gray, DicomGetImageFlags.None, oc);

         // New view perspective should be BottomLeft
         RasterViewPerspective newViewPerspective = image.ViewPerspective;
         MessageBox.Show("newViewPerspective should be BottomLeft\nActual newViewPerspective is " + newViewPerspective.ToString());

         DicomEngine.Shutdown();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--DicomExtensions.GetImage-->
      </example>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      <summary>
            Saves the contents of the Data Set to the specified xml output file.
            </summary>
      <keywords>DICOM XML format|DICOM Dataset XML format</keywords>
      <param name="ds">The contents of this DataSet to be saved</param>
      <param name="fileName">The name of the output xml file</param>
      <param name="xmlFlags">Flags that affect how binary data and other information is saved in the xml output file</param>
      <param name="cb">Optional callback that allows you to change the element names, attributes, and values of the xml output file</param>
      <remarks>
        <para>
            Use this method to export a <see cref="T:Leadtools.Dicom.DicomDataSet" /> as human-readable xml file.
            By default, all binary data is written using Base64 encoding, 
            but this behavior can be modified by passing appropriate <see cref="T:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags" /></para>
        <para>
            The output xml file can be customized by passing the optional <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate.
            For more information on this, see the documentation and example for <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" />.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      <summary>
            Saves the contents of the Data Set to the specified xml output file.
            </summary>
      <keywords>DICOM XML format|DICOM Dataset XML format</keywords>
      <param name="ds">The contents of this DataSet to be saved</param>
      <param name="fileName">The name of the output xml file</param>
      <param name="xmlFlags">Flags that affect how binary data and other information is saved in the xml output file</param>
      <remarks>
        <para>
            Use this method to export a <see cref="T:Leadtools.Dicom.DicomDataSet" /> as human-readable xml file.
            By default, all binary data is written using Base64 encoding, 
            but this behavior can be modified by passing appropriate <see cref="T:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags" /></para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      <summary>
            Saves the contents of the Data Set as an xml output stream.
            </summary>
      <keywords>DICOM XML format|DICOM Dataset XML format</keywords>
      <param name="ds">The Data Set being saved</param>
      <param name="stream">The stream where the output xml file is written</param>
      <param name="xmlFlags">Flags that affect how binary data and other information is saved in the xml output file</param>
      <param name="cb">Optional callback that allows you to change the element names, attributes, and values of the xml output file</param>
      <remarks>
        <para>
            Use this method to export a <see cref="T:Leadtools.Dicom.DicomDataSet" /> as a xml stream.
            By default, all binary data is written using Base64 encoding, 
            but this behavior can be modified by passing appropriate <see cref="T:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags" /></para>
        <para>
            The output xml file can be customized by passing the optional <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate.
            For more information on this, see the documentation and example for <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" />.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      <summary>
            Saves the contents of the Data Set as an xml output stream.
            </summary>
      <keywords>DICOM XML format|DICOM Dataset XML format</keywords>
      <param name="ds">The Data Set being saved</param>
      <param name="stream">The stream where the output xml file is written</param>
      <param name="xmlFlags">Flags that affect how binary data and other information is saved in the xml output file</param>
      <remarks>
        <para>
            Use this method to save a <see cref="T:Leadtools.Dicom.DicomDataSet" /> as an xml stream.
            By default, all binary data is written using Base64 encoding, 
            but this behavior can be modified by passing appropriate <see cref="T:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags" /></para>
        <para>
            The output xml file can be customized by passing the optional <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate.
            For more information on this, see the documentation and example for <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" />.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      <summary>
            Loads the contents of a DICOM encoded xml file
            </summary>
      <keywords>DICOM XML format|DICOM Dataset XML format</keywords>
      <param name="ds">The Data Set that will be created and populated with the contents of the DICOM xml input file</param>
      <param name="fileName">The name of the input xml file</param>
      <param name="xmlFlags">Flags that affect whether to ignore binary or all data from the DICOM xml input file</param>
      <param name="cbBefore">Optional callback that allows you to modify how the input xml file elements, attributes, and values are used.</param>
      <param name="cbAfter">Optional callback that allows you to change the <see cref="T:Leadtools.Dicom.DicomElement" /> after it has been added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.</param>
      <remarks>
        <para>
            Use this method to read the contents of a DICOM xml file.  The DICOM xml file can be created using <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)" />
            By default, all binary data is read from the DICOM input xml file, 
            but this behavior can be modified by passing appropriate <see cref="T:Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags" /></para>
        <para>
            The way the that this method processes the input xml file elements, attributes, 
            and element values can be customized by passing the optional <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" /> delegate.
            For more information on this, see the documentation and example for <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" />.
            The <see cref="T:Leadtools.Dicom.DicomElement" /> themselves can be modified after they have been added to the <see cref="T:Leadtools.Dicom.DicomDataSet" /> 
            by passing the optional <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback" /> delegate.
            For more information on this, see the documentation and example for <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback" />.
            </para>
      </remarks>
      <example>
        <para>This example will load a sample DICOM dataset, then save it as an xml file (with no binary data), 
            and then reload the xml file into a DicomDataSet object</para>
        <code lang="VB">      Public Sub LoadXmlExample()
         Dim dicomFileNameIn As String = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE3.dcm")
         Dim xmlFileNameOut As String = Path.Combine(LEAD_VARS.ImagesDir, "test.xml")

         ' Initialize DICOM engine
         DicomEngine.Startup()

         Dim ds As DicomDataSet = New DicomDataSet()

         ' Load an existing DICOM file
         ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None)

         ' Save as XML with no binary data
         ' For the demo, keep the xml output file size small by skipping the pixel data
         Dim xmlFlags As DicomDataSetSaveXmlFlags = DicomDataSetSaveXmlFlags.IgnoreBinaryData Or DicomDataSetSaveXmlFlags.TrimWhiteSpace Or DicomDataSetSaveXmlFlags.TagWithCommas
         ds.SaveXml(xmlFileNameOut, xmlFlags)

         ' Now reload the xml file.  
         ' Note that there will not be an image because we skipped the pixel data in the save
         ds.LoadXml(xmlFileNameOut, DicomDataSetLoadXmlFlags.None)

         DicomEngine.Shutdown()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadXmlExample()
      {
         string dicomFileNameIn = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE3.dcm");
         string xmlFileNameOut = Path.Combine(LEAD_VARS.ImagesDir, "test.xml");

         // Initialize DICOM engine
         DicomEngine.Startup();

         DicomDataSet ds = new DicomDataSet();

         // Load an existing DICOM file
         ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None);

         // Save as XML with no binary data
         // For the demo, keep the xml output file size small by skipping the pixel data
         DicomDataSetSaveXmlFlags xmlFlags =
            DicomDataSetSaveXmlFlags.IgnoreBinaryData |
            DicomDataSetSaveXmlFlags.TrimWhiteSpace |
            DicomDataSetSaveXmlFlags.TagWithCommas;
         ds.SaveXml(xmlFileNameOut, xmlFlags);

         // Now reload the xml file.  
         // Note that there will not be an image because we skipped the pixel data in the save
         ds.LoadXml(xmlFileNameOut, DicomDataSetLoadXmlFlags.None);

         DicomEngine.Shutdown();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--DicomExtensions.LoadXml-->
      </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      <summary>
            Loads the contents of a DICOM encoded xml file
            </summary>
      <keywords>DICOM XML format|DICOM Dataset XML format</keywords>
      <param name="ds">The Data Set that will be created and populated with the contents of the DICOM xml input file</param>
      <param name="fileName">The name of the input xml file</param>
      <param name="xmlFlags">Flags that affect whether to ignore binary or all data from the DICOM xml input file</param>
      <remarks>
        <para>
            Use this method to read the contents of a DICOM xml file.  The DICOM xml file can be created using <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)" />
            By default, all binary data is read from the DICOM input xml file, 
            but this behavior can be modified by passing appropriate <see cref="T:Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags" /></para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      <summary>
            Loads a stream containing a DICOM encoded xml file
            </summary>
      <keywords>DICOM XML format|DICOM Dataset XML format</keywords>
      <param name="ds">The Data Set that will be created and populated with the contents of the DICOM xml input file</param>
      <param name="stream">The name of the input xml file</param>
      <param name="xmlFlags">Flags that affect whether to ignore binary or all data from the DICOM xml input file</param>
      <param name="cbBefore">Optional callback that allows you to modify how the input xml file elements, attributes, and values are used.</param>
      <param name="cbAfter">Optional callback that allows you to change the <see cref="T:Leadtools.Dicom.DicomElement" /> after it has been added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.</param>
      <remarks>
        <para>
            Use this method to read the contents of a DICOM xml file.  The DICOM xml file can be created using <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)" />
            By default, all binary data is read from the DICOM input xml file, 
            but this behavior can be modified by passing appropriate <see cref="T:Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags" /></para>
        <para>
            The way the that this method processes the input xml file elements, attributes, 
            and element values can be customized by passing the optional <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" /> delegate.
            For more information on this, see the documentation and example for <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" />.
            The <see cref="T:Leadtools.Dicom.DicomElement" /> themselves can be modified after they have been added to the <see cref="T:Leadtools.Dicom.DicomDataSet" /> 
            by passing the optional <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback" /> delegate.
            For more information on this, see the documentation and example for <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback" />.
            </para>
      </remarks>
      <example>
        <para>This example loads a sample DICOM dataset, saves it as xml to a memory stream (with no binary data), 
            displays the memory stream, reloads the xml stream into a DicomDataSet object, and save the DicomDataSet object as a DICOM file</para>
        <code lang="VB">      Public Sub LoadXmlExample2()
         Dim dicomFileNameIn As String = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE3.dcm")
         Dim dicomFileNameOut As String = Path.Combine(LEAD_VARS.ImagesDir, "test.dcm")

         ' Initialize DICOM engine
         DicomEngine.Startup()

         Dim ds As DicomDataSet = New DicomDataSet()

         ' Load an existing DICOM file
         ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None)

         ' Save as XML to a stream with no binary data
         ' For the demo, keep the xml output file size small by skipping the pixel data
         Dim xmlFlags As DicomDataSetSaveXmlFlags = DicomDataSetSaveXmlFlags.IgnoreBinaryData Or DicomDataSetSaveXmlFlags.TrimWhiteSpace Or DicomDataSetSaveXmlFlags.TagWithCommas

         Dim stream As Stream = New MemoryStream()
         ds.SaveXml(stream, xmlFlags)

         ' Display contents of stream
         stream.Flush()
         stream.Position = 0
         Dim sr As StreamReader = New StreamReader(stream)
         Dim xmlString As String = sr.ReadToEnd()
         MessageBox.Show(xmlString, "xml version of " &amp; dicomFileNameIn)

         ' Now reload the xml file from the stream.  
         ' Note that there will not be an image because we skipped the pixel data in the save
         stream.Seek(0, SeekOrigin.Begin)
         'stream.Position = 0;
         ds.LoadXml(stream, DicomDataSetLoadXmlFlags.None)

         ds.Save(dicomFileNameOut, DicomDataSetSaveFlags.None)

         DicomEngine.Shutdown()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadXmlExample2()
      {
         string dicomFileNameIn = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE3.dcm");
         string dicomFileNameOut = Path.Combine(LEAD_VARS.ImagesDir, "test.dcm");

         // Initialize DICOM engine
         DicomEngine.Startup();

         DicomDataSet ds = new DicomDataSet();

         // Load an existing DICOM file
         ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None);

         // Save as XML to a stream with no binary data
         // For the demo, keep the xml output file size small by skipping the pixel data
         DicomDataSetSaveXmlFlags xmlFlags =
            DicomDataSetSaveXmlFlags.IgnoreBinaryData |
            DicomDataSetSaveXmlFlags.TrimWhiteSpace |
            DicomDataSetSaveXmlFlags.TagWithCommas;

         Stream stream = new MemoryStream();
         ds.SaveXml(stream, xmlFlags);

         // Display contents of stream
         stream.Flush();
         stream.Position = 0;
         StreamReader sr = new StreamReader(stream);
         string xmlString = sr.ReadToEnd();
         MessageBox.Show(xmlString, "xml version of " + dicomFileNameIn);

         // Now reload the xml file from the stream.  
         // Note that there will not be an image because we skipped the pixel data in the save
         stream.Seek(0, SeekOrigin.Begin);
         //stream.Position = 0;
         ds.LoadXml(stream, DicomDataSetLoadXmlFlags.None);

         ds.Save(dicomFileNameOut, DicomDataSetSaveFlags.None);

         DicomEngine.Shutdown();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--DicomExtensions.LoadXml_Stream-->
      </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      <summary>
            Loads a stream containing a DICOM encoded xml file
            </summary>
      <keywords>DICOM XML format|DICOM Dataset XML format</keywords>
      <param name="ds">The Data Set that will be created and populated with the contents of the DICOM xml input file</param>
      <param name="stream">The name of the input xml file</param>
      <param name="xmlFlags">Flags that affect whether to ignore binary or all data from the DICOM xml input file</param>
      <remarks>
        <para>
            Use this method to read the contents of a DICOM xml file.  The DICOM xml file can be created using <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)" />
            By default, all binary data is read from the DICOM input xml file, 
            but this behavior can be modified by passing appropriate <see cref="T:Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags" /></para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor">
      <summary>
            Provides an abstraction for a DICOM element property.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <param name="component">The component to test for reset capability.</param>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <param name="component">The component with the property for which to retrieve the value.</param>
      <returns>
            The value of a property for a given component.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.OnGetValue">
      <summary>
            Calls the GetElementValue event.
            </summary>
      <returns>The new value for the property.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set.</param>
      <param name="value">The new value.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.OnSetValue(System.Object)">
      <summary>
            Calls the SetElementValue event.
            </summary>
      <param name="value">The value to assign to the property.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <param name="component">The component with the property to be examined for persistence.</param>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.Element">
      <summary>
            Gets or sets the element this object refers to.
            </summary>
      <value>The DICOM element.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <value>
      </value>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the property is read-only; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditablePropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <value>
      </value>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.VoiLut">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientStudyModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ModalityLut">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.PresentationLut">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.DicomEditableProperty">
      <summary>
            Custom dynamic property for editing DICOM dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetAttributes">
      <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
      <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for this object.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetClassName">
      <summary>
            Returns the class name of this instance of a component.
            </summary>
      <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetComponentName">
      <summary>
            Returns the name of this instance of a component.
            </summary>
      <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetConverter">
      <summary>
            Returns a type converter for this instance of a component.
            </summary>
      <returns>
            A <see cref="T:System.ComponentModel.TypeConverter" /> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetDefaultEvent">
      <summary>
            Returns the default event for this instance of a component.
            </summary>
      <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor" /> that represents the default event for this object, or null if this object does not have events.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetDefaultProperty">
      <summary>
            Returns the default property for this instance of a component.
            </summary>
      <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the default property for this object, or null if this object does not have properties.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetEditor(System.Type)">
      <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
      <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the editor for this object.</param>
      <returns>
            An <see cref="T:System.Object" /> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetEvents(System.Attribute[])">
      <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
      <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the filtered events for this component instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetEvents">
      <summary>
            Returns the events for this instance of a component.
            </summary>
      <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the events for this component instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetProperties(System.Attribute[])">
      <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
      <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the filtered properties for this component instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetProperties">
      <summary>
            Returns the properties for this instance of a component.
            </summary>
      <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the properties for this component instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the owner of the specified property.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.DicomElement">
      <summary>
            Gets or sets the DICOM element.
            </summary>
      <value>The DICOM element associatied with this dynamic property.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.DataSet">
      <summary>
            Gets the data set.
            </summary>
      <value>The data set this property is associated with.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Attributes">
      <summary>
            A collection of attributes for this property.
            </summary>
      <value>The list of attributes.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Name">
      <summary>
            Gets or sets the name for this property.
            </summary>
      <value>The name.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Type">
      <summary>
            Gets or sets the type.
            </summary>
      <value>The <see cref="T:System.Type" /> instance that represents the exact runtime type of this property.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Value">
      <summary>
            Gets or sets the value for this property.
            </summary>
      <value>The property value value.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The property description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Choices">
      <summary>
            Gets the list of choices.
            </summary>
      <value>The list of choices choices.</value>
      <remarks>If a list of choices are provided a UITypeEditor combo box will be displayed in the property grid 
            to allow the user to choose an appropriate choice.
            </remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Elements">
      <summary>
            Gets the child element properties for this property instance.
            </summary>
      <value>The child element properties.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Parent">
      <summary>
            Gets the parent of this property.
            </summary>
      <value>The parent of this property.</value>
      <remarks>If this property represents a top level DICOM element the parent property will be null.</remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="E:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Disposed">
      <summary>
            Represents the method that handles the <see cref="E:System.ComponentModel.IComponent.Disposed" /> event of a component.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableProperty.Site">
      <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite" /> associated with the <see cref="T:System.ComponentModel.IComponent" />.
            </summary>
      <value>
      </value>
      <returns>
            The <see cref="T:System.ComponentModel.ISite" /> object associated with the component; or null, if the component does not have a site.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatientSequence">
      <summary>
            Provides information to create a referenced patient sequence in a DICOM dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatientSequence.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatientSequence" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatientSequence.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatientSequence" /> class.
            </summary>
      <param name="patientID">The patient ID.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatientSequence.PatientId">
      <summary>
            Gets or sets the patient id.
            </summary>
      <value>
            The patient id.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ClinicalTrialSubjectModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ClinicalTrialSeriesModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.SoftCopyVoiLut">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ReferencedSeries">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationSeriesModule">
      <exclude />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PresentationSeriesModule.Modality">
      <summary>
            Gets or sets the type of equipment that originally acquired the data.
            </summary>
      <value>The modality.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.EnumValueAttribute">
      <summary>
            Specifies a value to be associated with an enumeration.
            </summary>
      <remarks>
            If an enumeration value has the EnumValueAttribute, then the value in the attribute will be used
            to insert data into the dataset.  The actual enumeration field value will be ignored.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.EnumValueAttribute.#ctor(System.String)">
      <summary>
            Creates a new EnumValueAttribute, with the specified value.
            </summary>
      <param name="value">The value to be associated with an enumeration.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.EnumValueAttribute.Value">
      <summary>
            The value to be associated with an enumeration.
            </summary>
      <value> A string that represents the value to be associated with an enumeration.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PersonName">
      <summary>
            Represents the component parts of a DICOM Person Name.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.PersonName.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.PersonName" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.PersonName.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.PersonName" /> class.
            </summary>
      <param name="fullName">The full name.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.PersonName.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonName.Family">
      <summary>
            Gets or sets the family name.
            </summary>
      <value>The family name.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonName.Given">
      <summary>
            Gets or sets the given name.
            </summary>
      <value>The given name.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonName.Middle">
      <summary>
            Gets or sets the middle name.
            </summary>
      <value>The middle name.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonName.Prefix">
      <summary>
            Gets or sets the name prefix.
            </summary>
      <value>The name prefix.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonName.Suffix">
      <summary>
            Gets or sets the name suffix.
            </summary>
      <value>The name suffix.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonName.FullDicomEncoded">
      <summary>
            Gets or sets the full name with DICOM encoding.
            </summary>
      <value>The full name with DICOM encoding encoded.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PersonName.Full">
      <summary>
            Gets the full name without DICOM encoding.
            </summary>
      <value>The full name without DICOM encoding.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ModalityType">
      <summary>
            Specifies a DICOM modality.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.CR">
      <summary>
            Computed Radiography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.CT">
      <summary>
            Computed Tomography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.MR">
      <summary>
            Magnetic Resonance.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.NM">
      <summary>
            Nuclear Medicine.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.US">
      <summary>
            Ultra Sound.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.OT">
      <summary>
            Other.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.BI">
      <summary>
            Biomagnetic Imaging.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.CD">
      <summary>
            Color Flow Doppler-Retired 2008.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.DD">
      <summary>
            uplex Doppler-Retired 2008.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.DG">
      <summary>
            Diaphanography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.ES">
      <summary>
            Endoscopy.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.LS">
      <summary>
            Laser Surface Scan.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.PT">
      <summary>
            Positron Emission Tomography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.RG">
      <summary>
            Radiographic Imaging (conventional film screen).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.ST">
      <summary>
            Single-Photon Emission Computed Tomography - Retired 2008.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.TG">
      <summary>
            Thermography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.XA">
      <summary>
            X-Ray Angiography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.RF">
      <summary>
            Radio Fluoroscopy.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.RTIMAGE">
      <summary>
            Radiotherapy Image.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.RTDOSE">
      <summary>
            Radiotherapy Dose.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.RTSTRUCT">
      <summary>
            Radiotherapy Structure Set.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.RTPLAN">
      <summary>
            Radiotherapy Plan.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.RTRECORD">
      <summary>
            RT Treatment Record.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.HC">
      <summary>
            Hard Copy.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.DX">
      <summary>
            Digital Radiography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.MG">
      <summary>
            Mammography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.IO">
      <summary>
            Intra-oral Radiography.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.PX">
      <summary>
            Panoramic X-Ray.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.GM">
      <summary>
            General Microscopy.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.SM">
      <summary>
            Slide Microscopy.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.XC">
      <summary>
            External Camera (Photography).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.PR">
      <summary>
            Presentation State.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.AU">
      <summary>
            Audio.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.ECG">
      <summary>
            Electrocardiograms.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.EPS">
      <summary>
            Cardiac Electrophysiology.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.HD">
      <summary>
            Hemodynamic Waveform.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.SR">
      <summary>
            Structured Reporting.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.IVUS">
      <summary>
            Intravascular Ultrasound.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.DS">
      <summary>
            Digital Subtraction Angiography Retired
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.CF">
      <summary>
            Cinefluorography (retired).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.DF">
      <summary>
            Digital Fluoroscopy (retired).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.VF">
      <summary>
            Videofluorography (retired).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.AS">
      <summary>
            Angioscopy Retired.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.CS">
      <summary>
            Cystoscopy-Retired
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.EC">
      <summary>
            Echocardiography Retired.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.LP">
      <summary>
            Laparoscopy Retired.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.FA">
      <summary>
            Fluorescein Angiography Retired.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.CP">
      <summary>
            Colposcopy Retired.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.DM">
      <summary>
            Digital Microscopy.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.FS">
      <summary>
            Fundoscopy Retired.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.MA">
      <summary>
            Magnetic resonance angiography Retired.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.ModalityType.MS">
      <summary>
            Magnetic Resonance Spectroscopy Retired.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Validation.DicomVRValidation">
      <summary>
            Represents a class the validates DICOM Value Respresentations (VR).
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Validation.DicomVRValidation.GetErrorMessage(Leadtools.Dicom.DicomVRType)">
      <summary>
            Gets the error message or a specific VR.
            </summary>
      <param name="vr">The VR to get the error message for.</param>
      <returns>A validation error message if the VR failed validation.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Validation.DicomVRValidation.SetErrorMessage(Leadtools.Dicom.DicomVRType,System.String)">
      <summary>
            Sets the error message for a specific VR.
            </summary>
      <param name="vr">The VR to set the message for.</param>
      <param name="message">A descriptive validation error.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Validation.DicomVRValidation.IsValidVRValue(Leadtools.Dicom.DicomVRType,System.Collections.Generic.List{System.String},System.String@)">
      <summary>
            Determines whether list of values for the VR is valid.
            </summary>
      <param name="vr">The VR to check against the values.</param>
      <param name="values">The values to check.</param>
      <param name="errorMessage">The error message if the validation failed.</param>
      <returns>
        <c>true</c> if values are valid for the specified VR; otherwise, <c>false</c>.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Validation.DicomVRValidation.ValidationMessages">
      <summary>
            Gets the validation messages.
            </summary>
      <value>The validation messages.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Linq.BasicDirectory.DicomKeyAttribute">
      <summary>
            Specifies what DICOMDIR key this class/property is associated with.
            </summary>
      <example>
        <para>This example will show how to perform serveral different types of LINQ based queries on a 
            DICOM basic directory.</para>
        <code lang="VB">      &lt;DicomKey(DicomDirKeyType.Patient)&gt; _
      Public Class PatientEntity
         &lt;Element(DicomTag.PatientID)&gt; _
         Public Property Id() As String
            Get
               Return m_Id
            End Get
            Set(ByVal value As String)
               m_Id = value
            End Set
         End Property
         Private m_Id As String

         &lt;Element(DicomTag.PatientName)&gt; _
         Public Property Name() As String
            Get
               Return m_Name
            End Get
            Set(ByVal value As String)
               m_Name = value
            End Set
         End Property
         Private m_Name As String
      End Class

      &lt;DicomKey(DicomDirKeyType.Study)&gt; _
      Public Class StudyEntity
         &lt;Element(DicomTag.PatientID)&gt; _
         &lt;DicomKey(DicomDirKeyType.Patient)&gt; _
         Public Property PatientId() As String
            Get
               Return m_PatientId
            End Get
            Set(ByVal value As String)
               m_PatientId = value
            End Set
         End Property
         Private m_PatientId As String

         &lt;Element(DicomTag.StudyDate)&gt; _
         Public Property [Date]() As System.Nullable(Of DateTime)
            Get
               Return m_Date
            End Get
            Set(ByVal value As System.Nullable(Of DateTime))
               m_Date = value
            End Set
         End Property
         Private m_Date As System.Nullable(Of DateTime)

         &lt;Element(DicomTag.StudyTime)&gt; _
         Public Property Time() As System.Nullable(Of DateTime)
            Get
               Return m_Time
            End Get
            Set(ByVal value As System.Nullable(Of DateTime))
               m_Time = value
            End Set
         End Property
         Private m_Time As System.Nullable(Of DateTime)

         &lt;Element(DicomTag.StudyDescription)&gt; _
         Public Property Description() As String
            Get
               Return m_Description
            End Get
            Set(ByVal value As String)
               m_Description = value
            End Set
         End Property
         Private m_Description As String

         &lt;Element(DicomTag.StudyInstanceUID)&gt; _
         Public Property InstanceUID() As String
            Get
               Return m_InstanceUID
            End Get
            Set(ByVal value As String)
               m_InstanceUID = value
            End Set
         End Property
         Private m_InstanceUID As String

         &lt;Element(DicomTag.StudyID)&gt; _
         Public Property Id() As String
            Get
               Return m_Id
            End Get
            Set(ByVal value As String)
               m_Id = value
            End Set
         End Property
         Private m_Id As String

         &lt;Element(DicomTag.AccessionNumber)&gt; _
         Public Property AccessionNumber() As String
            Get
               Return m_AccessionNumber
            End Get
            Set(ByVal value As String)
               m_AccessionNumber = value
            End Set
         End Property
         Private m_AccessionNumber As String
      End Class


      Public Sub TestDicomLinq()
         DicomEngine.Startup()

         Using ds As New DicomDataSet()
            ds.Load(_DicomDirFile, DicomDataSetLoadFlags.None)
            FindPatients(ds)
            FindStudies(ds)
            FindPatientStudy(ds)
         End Using

         DicomEngine.Shutdown()
      End Sub

      Private Sub FindPatients(ByVal ds As DicomDataSet)
         Dim patients = From patient In ds.DirectoryRecord(Of PatientEntity)() _
                        Select Name = patient.Name, Id = patient.Id

         For Each patient In patients
            Console.WriteLine("Id: " &amp; Convert.ToString(patient.Id))
            Console.WriteLine("Name: " &amp; Convert.ToString(patient.Name))
         Next
      End Sub

      Private Sub FindStudies(ByVal ds As DicomDataSet)
         Dim studies = From study In ds.DirectoryRecord(Of StudyEntity)() _
               Select study

         For Each study In studies
            Console.WriteLine("Patient Id: " &amp; Convert.ToString(study.PatientId))
            Console.WriteLine("Accession #: " &amp; Convert.ToString(study.AccessionNumber))
            Console.WriteLine("Study Id: " &amp; Convert.ToString(study.Id))
         Next
      End Sub

      Private Sub FindPatientStudy(ByVal ds As DicomDataSet)
         Dim query = From patient In ds.DirectoryRecord(Of PatientEntity)() _
                     Select _
          patient, _
          Studies = From study In ds.DirectoryRecord(Of StudyEntity)() Where study.PatientId = patient.Id _
                    Select study

         For Each item In query
            Console.WriteLine("Patient: " &amp; Convert.ToString(item.patient.Id))
            For Each study As StudyEntity In item.Studies
               Console.WriteLine("    Instance UID: " + study.InstanceUID)
            Next
         Next
      End Sub
</code>
        <code lang="CS">      [DicomKey(DicomDirKeyType.Patient)]
      public class PatientEntity
      {
          [Element(DicomTag.PatientID)]
          public string Id
          {
              get;
              set;
          }

          [Element(DicomTag.PatientName)]
          public string Name
          {
              get;
              set;
          }
      }

      [DicomKey(DicomDirKeyType.Study)]
      public class StudyEntity
      {
          [Element(DicomTag.PatientID)]
          [DicomKey(DicomDirKeyType.Patient)]
          public string PatientId
          {
              get;
              set;
          }

          [Element(DicomTag.StudyDate)]
          public DateTime? Date
          {
              get;
              set;
          }

          [Element(DicomTag.StudyTime)]
          public DateTime? Time
          {
              get;
              set;
          }

          [Element(DicomTag.StudyDescription)]
          public string Description
          {
              get;
              set;
          }

          [Element(DicomTag.StudyInstanceUID)]
          public string InstanceUID
          {
              get;
              set;
          }

          [Element(DicomTag.StudyID)]
          public string Id
          {
              get;
              set;
          }

          [Element(DicomTag.AccessionNumber)]
          public string AccessionNumber
          {
              get;
              set;
          }
      }


      public void TestDicomLinq()
      {
          DicomEngine.Startup();

          using (DicomDataSet ds = new DicomDataSet())
          {
              ds.Load(_DicomDirFile, DicomDataSetLoadFlags.None);
              FindPatients(ds);
              FindStudies(ds);
              FindPatientStudy(ds);
          }

          DicomEngine.Shutdown();
      }

      private void FindPatients(DicomDataSet ds)
      {
          var patients = from patient in ds.DirectoryRecord&lt;PatientEntity&gt;()
                         select new { Name = patient.Name, Id = patient.Id };

          foreach (var patient in patients)
          {
              Console.WriteLine("Id: " + patient.Id);
              Console.WriteLine("Name: " + patient.Name);
          }
      }

      private void FindStudies(DicomDataSet ds)
      {
           var studies = from study in ds.DirectoryRecord&lt;StudyEntity&gt;()
                         select study;

           foreach (var study in studies)
           {
               Console.WriteLine("Patient Id: " + study.PatientId);
               Console.WriteLine("Accession #: " + study.AccessionNumber);
               Console.WriteLine("Study Id: " +study.Id);
           }
      }

      private void FindPatientStudy(DicomDataSet ds)
      {
          var query = from patient in ds.DirectoryRecord&lt;PatientEntity&gt;()                      
                      select new
                      {
                          patient,
                          Studies = from study in ds.DirectoryRecord&lt;StudyEntity&gt;()
                                    where study.PatientId == patient.Id
                                    select study
                      };

          foreach (var item in query)
          {
              Console.WriteLine("Patient: " + item.patient.Id);
              foreach (StudyEntity study in item.Studies)
              {
                  Console.WriteLine("    Instance UID: " + study.InstanceUID);
              }
          }
      }
</code>
        <!--Dicom.Linq-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.BasicDirectory.DicomKeyAttribute.#ctor(Leadtools.Dicom.DicomDirKeyType)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Linq.BasicDirectory.DicomKeyAttribute" /> class.
            </summary>
      <param name="key">The key.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Linq.BasicDirectory.DicomKeyAttribute"></see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Linq.BasicDirectory.DicomKeyAttribute.DicomKey">
      <summary>
            Gets the DICOMDIR key type.
            </summary>
      <value>The dicom key.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Linq.BasicDirectory.DicomKeyAttribute"></see>.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.SoftCopyPresentationLutModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.DisplayShutterModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.GeneralExtensions">
      <summary>
            General extensions extension methods for a variety of types.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.GeneralExtensions.IsNullOrEmpty(System.String)">
      <summary>
            Determines whether specified string is null or empty.
            </summary>
      <param name="theString">The string.</param>
      <returns>
        <c>true</c> if the specified string is null or empty; otherwise, <c>false</c>.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.GeneralExtensions.IsNumeric(System.String)">
      <summary>
            Determines whether the specified string is numeric.
            </summary>
      <param name="s">The string to check.</param>
      <returns>
        <c>true</c> if the specified string is numeric; otherwise, <c>false</c>.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.GeneralExtensions.Parse``1(System.String)">
      <summary>
            Parses the specified string to an enumeration.
            </summary>
      <typeparam name="T">The enumeration type</typeparam>
      <param name="value">The string to parse.</param>
      <returns>The enumeration value that corresponds to the string.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.GeneralExtensions.Parse``1(System.String,System.Boolean)">
      <summary>
            Parses the specified string to an enumeration allowing for a case insensitve comparison.
            </summary>
      <typeparam name="T">The enumeration type</typeparam>
      <param name="value">The string to parse.</param>
      <param name="ignoreCase">if set to true ignore case during string comparison.</param>
      <returns>The enumeration value that corresponds to the string.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.GeneralExtensions.ChangeType(System.Object,System.Type)">
      <summary>
            Changes object to another type.
            </summary>
      <param name="value">The object to change.</param>
      <param name="to">The type of change the object to.</param>
      <returns>The new object changed to the specified type.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.GeneralExtensions.Fire``1(System.EventHandler{``0},System.Object,``0)">
      <summary>
            Fires the specified event handler.
            </summary>
      <typeparam name="T">The type of event args for the event.</typeparam>
      <param name="eventHandler">The event handler.</param>
      <param name="sender">The sender.</param>
      <param name="e">An instance of the eventargs.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.DicomEditableObject">
      <summary>
            A custom object that represents a DICOM dataset.
            </summary>
      <example>
        <para>This example assigns a value to the DICOM editable object.</para>
        <code lang="VB">      &lt;Test&gt; _
      Public Sub TestEditableObject()
         Dim dcmObject As DicomEditableObject = New DicomEditableObject()
         Dim ds As DicomDataSet = Nothing
         Dim dicomFileNameIn As String = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE2.dcm")

         DicomEngine.Startup()

         ds = New DicomDataSet()
         ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None)
            AddHandler dcmObject.BeforeAddElement, AddressOf dcmObject_BeforeAddElement
         dcmObject.DataSet = ds
         Console.WriteLine("Root Element Count: " &amp; dcmObject.Elements.Count.ToString())

         '
         ' At this point the object can be assigned to a property grid.
         '
         DicomEngine.Shutdown()
      End Sub

      Private Sub dcmObject_BeforeAddElement(ByVal sender As Object, ByVal e As BeforeAddElementEventArgs)
         Console.WriteLine(e.Element.Name)
         Console.WriteLine(e.Element.DicomElement.VR.ToString())
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">
        public void TestEditableObject()
        {
            DicomEditableObject dcmObject = new DicomEditableObject();
            DicomDataSet ds = null;
            string dicomFileNameIn = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE2.dcm");

            DicomEngine.Startup();

            ds = new DicomDataSet();
            ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None);
            dcmObject.BeforeAddElement += new EventHandler&lt;BeforeAddElementEventArgs&gt;(dcmObject_BeforeAddElement);
            dcmObject.DataSet = ds;
            Console.WriteLine("Root Element Count: " + dcmObject.Elements.Count.ToString());

            //
            // At this point the object can be assigned to a property grid.
            //
            DicomEngine.Shutdown();
        }

        void dcmObject_BeforeAddElement(object sender, BeforeAddElementEventArgs e)
        {
            Console.WriteLine(e.Element.Name);
            Console.WriteLine(e.Element.DicomElement.VR.ToString());
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--ParsingSample.EditableObject-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Editing.DicomEditableObject" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.AddCommand(System.String,System.EventHandler)">
      <summary>
            Adds a command to this object.
            </summary>
      <param name="name">The name of the command.</param>
      <param name="handler">The handler to be invoked when the command is selected.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.CommandID" /> of the new command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.AddCommand(System.String,System.Boolean,System.EventHandler)">
      <summary>
            Adds the command.
            </summary>
      <param name="name">The name of the command.</param>
      <param name="enable">if set to <c>true</c> enable the command.</param>
      <param name="handler">The handler to be invoked when the command is selected.</param>
      <returns>
        <see cref="T:System.ComponentModel.CommandID" /> of the new command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.EnableCommand(System.ComponentModel.Design.CommandID,System.Boolean)">
      <summary>
            Enables the command.
            </summary>
      <param name="id">The id of the command.</param>
      <param name="enable">if set to <c>true</c> enable the command.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.RemoveCommand(System.ComponentModel.Design.CommandID)">
      <summary>
            Removes the command.
            </summary>
      <param name="id">The id of the command.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.AddTag(Leadtools.Dicom.Common.Editing.DicomEditableProperty,System.Int64)">
      <summary>
            Adds the DICOM tag this this object.
            </summary>
      <param name="parent">The parent of this DICOM tag.</param>
      <param name="tag">The DICOM element tag to add.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.AddSequenceItem(Leadtools.Dicom.Common.Editing.DicomEditableProperty)">
      <summary>
            Adds a new sequence item to this object.
            </summary>
      <param name="sequence">The sequence to add the item to.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetAttributes">
      <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
      <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for this object.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetClassName">
      <summary>
            Returns the class name of this instance of a component.
            </summary>
      <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetComponentName">
      <summary>
            Returns the name of this instance of a component.
            </summary>
      <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetConverter">
      <summary>
            Returns a type converter for this instance of a component.
            </summary>
      <returns>
            A <see cref="T:System.ComponentModel.TypeConverter" /> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetDefaultEvent">
      <summary>
            Returns the default event for this instance of a component.
            </summary>
      <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor" /> that represents the default event for this object, or null if this object does not have events.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetDefaultProperty">
      <summary>
            Returns the default property for this instance of a component.
            </summary>
      <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the default property for this object, or null if this object does not have properties.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetEditor(System.Type)">
      <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
      <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the editor for this object.</param>
      <returns>
            An <see cref="T:System.Object" /> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetEvents(System.Attribute[])">
      <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
      <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the filtered events for this component instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetEvents">
      <summary>
            Returns the events for this instance of a component.
            </summary>
      <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the events for this component instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetProperties(System.Attribute[])">
      <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
      <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the filtered properties for this component instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetProperties">
      <summary>
            Returns the properties for this instance of a component.
            </summary>
      <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the properties for this component instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
      <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the owner of the specified property.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.DicomEditableObject.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableObject.DataSet">
      <summary>
            Gets or sets the dataset this object represents.
            </summary>
      <value>The dataset.</value>
      <example>For an example before to <see cref="T:Leadtools.Dicom.Common.Editing.DicomEditableObject" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableObject.DefaultTag">
      <summary>
            Gets or sets the default tag.
            </summary>
      <value>The default tag.</value>
      <remarks>This tag will be highlighted when the object is assigned to a property grid.</remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableObject.Elements">
      <summary>
            Gets the list of dynamic properties that represent the DICOM dataset.
            </summary>
      <value>The list of elements.</value>
      <example>For an example before to <see cref="T:Leadtools.Dicom.Common.Editing.DicomEditableObject" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableObject.DisplayTagInfo">
      <summary>
            Gets or sets a value indicating whether display tag info.
            </summary>
      <value>
        <c>true</c> to display tag info; otherwise, <c>false</c>.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableObject.ReadOnly">
      <summary>
            Gets or sets a value indicating whether the dataset this object represents is read only.
            </summary>
      <value>
        <c>true</c> if read only; otherwise, <c>false</c>.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="E:Leadtools.Dicom.Common.Editing.DicomEditableObject.BeforeAddElement">
      <summary>
            Occurs when before an element is added to this object.
            </summary>
      <example>For an example before to <see cref="T:Leadtools.Dicom.Common.Editing.DicomEditableObject" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.Dicom.Common.Editing.DicomEditableObject.SetElementValue">
      <summary>
            Occurs when an objects value is about to be set.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="E:Leadtools.Dicom.Common.Editing.DicomEditableObject.GetElementValue">
      <summary>
            Occurs when an objects value is requested.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="E:Leadtools.Dicom.Common.Editing.DicomEditableObject.Disposed">
      <summary>
            Represents the method that handles the <see cref="E:System.ComponentModel.IComponent.Disposed" /> event of a component.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.DicomEditableObject.Site">
      <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite" /> associated with the <see cref="T:System.ComponentModel.IComponent" />.
            </summary>
      <value>
      </value>
      <returns>
            The <see cref="T:System.ComponentModel.ISite" /> object associated with the component; or null, if the component does not have a site.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyStudy">
      <summary>
            Provides the necessary information to copy a study to a new patient via the Patient Updater DICOM Service.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyStudy.PatientId">
      <summary>
            Gets or sets the patient id.
            </summary>
      <value>
            The patient id.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyStudy.Name">
      <summary>
            Gets or sets the patient name.
            </summary>
      <value>
            The patient name.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyStudy.Sex">
      <summary>
            Gets or sets the patient sex.
            </summary>
      <value>
            The patient sex.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyStudy.Birthdate">
      <summary>
            Gets or sets the patient birthdate.
            </summary>
      <value>
            The patient birthdate.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyStudy.StudyInstanceUID">
      <summary>
            Gets or sets the study instance UID.
            </summary>
      <value>
            The study instance UID.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyStudy.PatientToMerge">
      <summary>
            Gets or sets the patient copy the study to.
            </summary>
      <value>
            The patient to copy study to.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep">
      <summary>
            Class that defines a Modality Perform Procedure step dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.From(Leadtools.Dicom.Common.DataTypes.Modality.ModalityWorklistResult)">
      <summary>
            Converts a Modality work list info a Modality Performed Procedure Step.
            </summary>
      <param name="result">The modality worklist to convert.</param>
      <returns>The ModalityPerformedProcedureStep created from the ModalityWorklistResult.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.RandomId(System.Int32)">
      <summary>
            Generates a random string.
            </summary>
      <param name="size">The size of the string to create.</param>
      <returns>A random string with the specified size.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.ScheduledStepAttributeSequence">
      <summary>
            Gets or sets the scheduled step attribute sequence.
            </summary>
      <value>The scheduled step attribute sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PatientName">
      <summary>
            Gets or sets the name of the patient.
            </summary>
      <value>The name of the patient.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PatientId">
      <summary>
            Gets or sets the patient id.
            </summary>
      <value>The patient id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.IssuerOfPatientId">
      <summary>
            Gets or sets the issuer of patient id.
            </summary>
      <value>The issuer of patient id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PatientBirthDate">
      <summary>
            Gets or sets the patient birth date.
            </summary>
      <value>The patient birth date.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PatientSex">
      <summary>
            Gets or sets the patient sex.
            </summary>
      <value>The patient sex.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.ReferencedPatientSequence">
      <summary>
            Gets or sets the referenced patient sequence.
            </summary>
      <value>The referenced patient sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.AdmissionId">
      <summary>
            Gets or sets the admission id.
            </summary>
      <value>The admission id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.IssuerOfAdmissionId">
      <summary>
            Gets or sets the issuer of admission id.
            </summary>
      <value>The issuer of admission id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.ServiceEpisodeId">
      <summary>
            Gets or sets the service episode id.
            </summary>
      <value>The service episode id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.IssuerOfServiceEpisodeId">
      <summary>
            Gets or sets the issuer of service episode id.
            </summary>
      <value>The issuer of service episode id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.ServiceEpisodeDescription">
      <summary>
            Gets or sets the service episode description.
            </summary>
      <value>The service episode description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureStepId">
      <summary>
            Gets or sets the performed procedure step id.
            </summary>
      <value>The performed procedure step id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedStationAeTitle">
      <summary>
            Gets or sets the performed station ae title.
            </summary>
      <value>The performed station ae title.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedStationName">
      <summary>
            Gets or sets the name of the performed station.
            </summary>
      <value>The name of the performed station.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedLocation">
      <summary>
            Gets or sets the performed location.
            </summary>
      <value>The performed location.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureStepStartDate">
      <summary>
            Gets or sets the performed procedure step start date.
            </summary>
      <value>The performed procedure step start date.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureStepStartTime">
      <summary>
            Gets or sets the performed procedure step start time.
            </summary>
      <value>The performed procedure step start time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureStepStatus">
      <summary>
            Gets or sets the performed procedure step status.
            </summary>
      <value>The performed procedure step status.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureStepDescription">
      <summary>
            Gets or sets the performed procedure step description.
            </summary>
      <value>The performed procedure step description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureTypeDescription">
      <summary>
            Gets or sets the performed procedure type description.
            </summary>
      <value>The performed procedure type description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.ProcedureCodeSequence">
      <summary>
            Gets or sets the procedure code sequence.
            </summary>
      <value>The procedure code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureStepEndDate">
      <summary>
            Gets or sets the performed procedure step end date.
            </summary>
      <value>The performed procedure step end date.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureStepEndTime">
      <summary>
            Gets or sets the performed procedure step end time.
            </summary>
      <value>The performed procedure step end time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.CommentsOnThePerformedProcedureStep">
      <summary>
            Gets or sets the comments on the performed procedure step.
            </summary>
      <value>The comments on the performed procedure step.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProcedureStepDiscontinuationReasonCodeSequence">
      <summary>
            Gets or sets the performed procedure step discontinuation reason code sequence.
            </summary>
      <value>
            The performed procedure step discontinuation reason code sequence.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.Modality">
      <summary>
            Gets or sets the modality.
            </summary>
      <value>The modality.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.StudyId">
      <summary>
            Gets or sets the study id.
            </summary>
      <value>The study id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedProtocolCodeSequence">
      <summary>
            Gets or sets the performed protocol code sequence.
            </summary>
      <value>The performed protocol code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.PerformedSeriesSequence">
      <summary>
            Gets or sets the performed series sequence.
            </summary>
      <value>The performed series sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.SOPInstance">
      <summary>
            Gets or sets the SOP instance information.
            </summary>
      <value>The SOP instance information.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ModalityPerformedProcedureStep.Tag">
      <summary>
            Gets or sets the tag.
            </summary>
      <value>The tag.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.SpatialRegistration">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.GeneralStudyModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.OrientationManager">
      <summary>
            Provides utility functions for mapping Image Orientation Vectors (which are 'direction cosines') to an orientation axis, or an orientation plane.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.OrientationManager.GetMajorAxisFromPatientRelativeDirectionCosine(System.Double,System.Double,System.Double)">
      <summary>
            Indicates the <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationAxis" /> that is the closest to a specified by a direction cosine vector.
            </summary>
      <param name="x">The x component of the direction cosine vector.</param>
      <param name="y">The y component of the direction cosine vector.</param>
      <param name="z">The z component of the direction cosine vector.</param>
      <returns>
            The <see cref="T:Leadtools.Dicom.Common.DataTypes.OrientationAxis" /> that is the closest to a direction cosine vector.
            </returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.OrientationManager.GetOrientationPlane(System.Double[])">
      <summary>
            Indicates the <see cref="T:Leadtools.Dicom.Common.DataTypes.Plane" /> that is the closest to a specified by two direction cosine vectors.
            </summary>
      <param name="d">
            An array of exactly six <see cref="T:System.Double" /> values, corresponding to the two direction consine vectors.
            </param>
      <returns>
            The <see cref="T:Leadtools.Dicom.Common.DataTypes.Plane" /> that is the closest to that specified by two direction cosine vectors.
            </returns>
      <remarks>
            The <paramref name="d" /> species exactly six values.  
            The first three values correspond to the direction cosine of the first row with respect to the patient.
            The second three values correspond to the direction cosine of the first column with respect to the patient.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.OrientationManager.GetOrientationPlane(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Returns the <see cref="T:Leadtools.Dicom.Common.DataTypes.Plane" /> that is the closest to that is specified by two direction cosine vectors.
            </summary>
      <param name="rowX">The x component of the row direction cosine vector.</param>
      <param name="rowY">The y component of the row direction cosine vector.</param>
      <param name="rowZ">The z component of the row direction cosine vector.</param>
      <param name="colX">The x component of the column direction cosine vector.</param>
      <param name="colY">The x component of the column direction cosine vector.</param>
      <param name="colZ">The x component of the column direction cosine vector.</param>
      <returns>
            The <see cref="T:Leadtools.Dicom.Common.DataTypes.Plane" /> that is the closest to that is specified by two direction cosine vectors.
            </returns>
      <remarks>
            The <paramref name="d" /> specfies exactly six values.  
            The first three values correspond to the direction cosine of the first row with respect to the patient.
            The second three values correspond to the direction cosine of the first column with respect to the patient.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.UI.SequenceEditor">
      <summary>
            Provides a user interface than can edit a DICOM sequence item.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.SequenceEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method. If the <see cref="T:System.Drawing.Design.UITypeEditor" /> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.SequenceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
      <param name="value">The object to edit.</param>
      <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.BeforeAddElementEventArgs">
      <summary>
            Provides data for the BeforeAddElement event.
            </summary>
      <example>For an example before to <see cref="T:Leadtools.Dicom.Common.Editing.DicomEditableObject" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Editing.BeforeAddElementEventArgs.Element">
      <summary>
            The dynamic property that represents the element.
            </summary>
      <value>The dynamic property.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.NumberListTypeConverter">
      <summary>
            Provides a type converter to convert a list of numbers to a comma separated string list.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.NumberListTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.NumberListTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.Time">
      <summary>
            Represents a time value.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.Time.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.Time" /> struct.
            </summary>
      <param name="datetime">The datetime.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.Time.IsNull">
      <summary>
            Determines whether this instance is null.
            </summary>
      <returns>
        <c>true</c> if this instance is null; otherwise, <c>false</c>.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.Time.op_Implicit(Leadtools.Dicom.Common.DataTypes.Time)~System.DateTime">
      <summary>
            Performs an implicit conversion from <see cref="T:Leadtools.Dicom.Common.DataTypes.Time" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="x">The time to convert.</param>
      <returns>The result of the conversion.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.Time.op_Implicit(System.DateTime)~Leadtools.Dicom.Common.DataTypes.Time">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Leadtools.Dicom.Common.DataTypes.Time" />.
            </summary>
      <param name="x">The date time to convert.</param>
      <returns>The result of the conversion.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.Time.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.Time.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format of the return string.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Time.Hour">
      <summary>
            Gets or sets the hour.
            </summary>
      <value>The hour.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Time.Minute">
      <summary>
            Gets or sets the minute.
            </summary>
      <value>The minute.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Time.Seconds">
      <summary>
            Gets or sets the seconds.
            </summary>
      <value>The seconds.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Time.Millisecond">
      <summary>
            Gets or sets the millisecond.
            </summary>
      <value>The millisecond.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ElementTag">
      <summary>
            Defines a DICOM tag along with is value.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.ElementTag.MakeTag(System.Int32,System.Int32)">
      <summary>
            Makes a DICOM tag value from the specified group and element.
            </summary>
      <param name="group">The DICOM group.</param>
      <param name="element">The DICOM element.</param>
      <returns>A valid DICOM tag number.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ElementTag.Tag">
      <summary>
            Gets or sets the DICOM tag.
            </summary>
      <value>The DICOM tag.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ElementTag.Value">
      <summary>
            Gets or sets the value of the tag.
            </summary>
      <value>The value of the tag.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ContributingEquipment">
      <summary>
            Contains properties the describe related equipment which has contributed to acquisition, creation or modification of
            a composite instance.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.PurposeOfReferenceCodeSequence">
      <summary>
            Gets or sets the purpose of reference code sequence.
            </summary>
      <value>The purpose of reference code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.Manufacturer">
      <summary>
            Gets or sets the manufacturer.
            </summary>
      <value>The manufacturer of the equipment.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.InstitutionName">
      <summary>
            Gets or sets the name of the institution.
            </summary>
      <value>The name of the institution.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.InstitutionAddress">
      <summary>
            Gets or sets the institution address.
            </summary>
      <value>The institution address.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.StationName">
      <summary>
            Gets or sets the name of the station.
            </summary>
      <value>The name of the station.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.InstitutionalDepartmentName">
      <summary>
            Gets or sets the name of the institutional department.
            </summary>
      <value>The name of the institutional department.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.ManufacturerModelName">
      <summary>
            Gets or sets the name of the manufacturer model.
            </summary>
      <value>The name of the manufacturer model.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.DeviceSerialNumber">
      <summary>
            Gets or sets the device serial number.
            </summary>
      <value>The device serial number.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.SoftwareVersion">
      <summary>
            Gets or sets the software version.
            </summary>
      <value>The software version.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.SpatialResolution">
      <summary>
            Gets or sets the spatial resolution.
            </summary>
      <value>The spatial resolution.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.DateOfLastCalibration">
      <summary>
            Gets or sets the date of last calibration.
            </summary>
      <value>The date of last calibration.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.TimeOfLastCalibration">
      <summary>
            Gets or sets the time of last calibration.
            </summary>
      <value>The time of last calibration.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.ContributionDateTime">
      <summary>
            Gets or sets the contribution date time.
            </summary>
      <value>The contribution date time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContributingEquipment.ContributionDescription">
      <summary>
            Gets or sets the contribution description.
            </summary>
      <value>The contribution description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ImageSopInstanceReference">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.SopInstanceReference">
      <summary>
            Class that defines SOP instance reference information.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.SopInstanceReference.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.SopInstanceReference" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.SopInstanceReference.Import(Leadtools.Dicom.DicomDataSet)">
      <summary>
            Imports the SOP instance information from the specified dataset.
            </summary>
      <param name="dataset">The dataset to import from.</param>
      <returns>A new class that has the SOP instance information from the provided dataset.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SopInstanceReference.ReferencedSopClassUid">
      <summary>
            Gets or sets the referenced sop class uid.
            </summary>
      <value>The referenced sop class uid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SopInstanceReference.ReferencedSopInstanceUid">
      <summary>
            Gets or sets the referenced sop instance uid.
            </summary>
      <value>The referenced sop instance uid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.PresentationStateIdentificationModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ImageBoxSynchronization">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.HierarchicalSopInstance">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.UID">
      <summary>
            Defines the Patient Updater DICOM Service SOP class and instance.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.UID.PatientUpdateClass">
      <summary>
            The Patient Updater DICOM Service SOP class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.UID.PatientUpdateInstance">
      <summary>
            The Patient Updater DICOM Service instance.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action">
      <summary>
            Defines the available patient udater actions.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.ChangePatient">
      <summary>
            Change patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.DeletePatient">
      <summary>
            Delete patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.MergePatient">
      <summary>
            Merge patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.ChangeSeries">
      <summary>
            Change series.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.DeleteSeries">
      <summary>
            Delete series.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.MergeStudy">
      <summary>
            Merge study.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.MoveStudyToNewPatient">
      <summary>
            Move study to new patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.CopyPatient">
      <summary>
            Copy an existing patient.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.DataTypes.PatientUpdater.PatientUpdaterConstants.Action.CopyStudy">
      <summary>
            Copy an existing study.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.VoiLutModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.StructuredDisplay.StructuredDisplayImageBoxModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Linq.BasicDirectory.LinqExtensions">
      <summary>
            This class is used to provided extension methods to the Leadtools.Dicom classes.
            </summary>
      <noexample />
      <remarks>The extension method provide here is used to provide a LINQ provider for extracting DICOM basic
            directory information.</remarks>
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.BasicDirectory.LinqExtensions.DirectoryRecord``1(Leadtools.Dicom.DicomDataSet)">
      <summary>
            Represents a typed query against a DICOMDIR file.
            </summary>
      <remarks>
            This extension method represents a query that returns a collection of zero or
            more objects of a specific type. A valid DICOMDIR must be present in the dataset
            parameter before a query can be executed. A DICOMDIR query will be executed in
            the following scenarios: 
            <para></para><list type="bullet"><item><description>When it is acted upon, such as during a foreach(C#) or For Each
            (Visual Basic) enumeration.</description></item><item><description>When it is assigned to fill a List&lt;T&gt;
            collection.</description></item></list><para></para><para>The following operations are provided by the DICOMDIR LINQ
            Provider.</para><para></para><list type="bullet"><item><description>SelectMany</description></item><item><description>String Methods (Contains, StartWith, and
            EndsWith)</description></item><item><description>LINQ Projection</description></item><item><description>Subqueries</description></item></list></remarks>
      <typeparam name="T">The entity type of the query.</typeparam>
      <param name="dataset">The dataset that holds information on a DICOM basic
            directory.</param>
      <returns>
            A object that provides LINQ based access to a DICOM basic directory.
            </returns>
      <example>
        <para>This example will show how to perform serveral different types of LINQ based
            queries on a DICOM basic directory.</para>
        <code lang="VB">      &lt;DicomKey(DicomDirKeyType.Patient)&gt; _
      Public Class PatientEntity
         &lt;Element(DicomTag.PatientID)&gt; _
         Public Property Id() As String
            Get
               Return m_Id
            End Get
            Set(ByVal value As String)
               m_Id = value
            End Set
         End Property
         Private m_Id As String

         &lt;Element(DicomTag.PatientName)&gt; _
         Public Property Name() As String
            Get
               Return m_Name
            End Get
            Set(ByVal value As String)
               m_Name = value
            End Set
         End Property
         Private m_Name As String
      End Class

      &lt;DicomKey(DicomDirKeyType.Study)&gt; _
      Public Class StudyEntity
         &lt;Element(DicomTag.PatientID)&gt; _
         &lt;DicomKey(DicomDirKeyType.Patient)&gt; _
         Public Property PatientId() As String
            Get
               Return m_PatientId
            End Get
            Set(ByVal value As String)
               m_PatientId = value
            End Set
         End Property
         Private m_PatientId As String

         &lt;Element(DicomTag.StudyDate)&gt; _
         Public Property [Date]() As System.Nullable(Of DateTime)
            Get
               Return m_Date
            End Get
            Set(ByVal value As System.Nullable(Of DateTime))
               m_Date = value
            End Set
         End Property
         Private m_Date As System.Nullable(Of DateTime)

         &lt;Element(DicomTag.StudyTime)&gt; _
         Public Property Time() As System.Nullable(Of DateTime)
            Get
               Return m_Time
            End Get
            Set(ByVal value As System.Nullable(Of DateTime))
               m_Time = value
            End Set
         End Property
         Private m_Time As System.Nullable(Of DateTime)

         &lt;Element(DicomTag.StudyDescription)&gt; _
         Public Property Description() As String
            Get
               Return m_Description
            End Get
            Set(ByVal value As String)
               m_Description = value
            End Set
         End Property
         Private m_Description As String

         &lt;Element(DicomTag.StudyInstanceUID)&gt; _
         Public Property InstanceUID() As String
            Get
               Return m_InstanceUID
            End Get
            Set(ByVal value As String)
               m_InstanceUID = value
            End Set
         End Property
         Private m_InstanceUID As String

         &lt;Element(DicomTag.StudyID)&gt; _
         Public Property Id() As String
            Get
               Return m_Id
            End Get
            Set(ByVal value As String)
               m_Id = value
            End Set
         End Property
         Private m_Id As String

         &lt;Element(DicomTag.AccessionNumber)&gt; _
         Public Property AccessionNumber() As String
            Get
               Return m_AccessionNumber
            End Get
            Set(ByVal value As String)
               m_AccessionNumber = value
            End Set
         End Property
         Private m_AccessionNumber As String
      End Class


      Public Sub TestDicomLinq()
         DicomEngine.Startup()

         Using ds As New DicomDataSet()
            ds.Load(_DicomDirFile, DicomDataSetLoadFlags.None)
            FindPatients(ds)
            FindStudies(ds)
            FindPatientStudy(ds)
         End Using

         DicomEngine.Shutdown()
      End Sub

      Private Sub FindPatients(ByVal ds As DicomDataSet)
         Dim patients = From patient In ds.DirectoryRecord(Of PatientEntity)() _
                        Select Name = patient.Name, Id = patient.Id

         For Each patient In patients
            Console.WriteLine("Id: " &amp; Convert.ToString(patient.Id))
            Console.WriteLine("Name: " &amp; Convert.ToString(patient.Name))
         Next
      End Sub

      Private Sub FindStudies(ByVal ds As DicomDataSet)
         Dim studies = From study In ds.DirectoryRecord(Of StudyEntity)() _
               Select study

         For Each study In studies
            Console.WriteLine("Patient Id: " &amp; Convert.ToString(study.PatientId))
            Console.WriteLine("Accession #: " &amp; Convert.ToString(study.AccessionNumber))
            Console.WriteLine("Study Id: " &amp; Convert.ToString(study.Id))
         Next
      End Sub

      Private Sub FindPatientStudy(ByVal ds As DicomDataSet)
         Dim query = From patient In ds.DirectoryRecord(Of PatientEntity)() _
                     Select _
          patient, _
          Studies = From study In ds.DirectoryRecord(Of StudyEntity)() Where study.PatientId = patient.Id _
                    Select study

         For Each item In query
            Console.WriteLine("Patient: " &amp; Convert.ToString(item.patient.Id))
            For Each study As StudyEntity In item.Studies
               Console.WriteLine("    Instance UID: " + study.InstanceUID)
            Next
         Next
      End Sub
</code>
        <code lang="CS">      [DicomKey(DicomDirKeyType.Patient)]
      public class PatientEntity
      {
          [Element(DicomTag.PatientID)]
          public string Id
          {
              get;
              set;
          }

          [Element(DicomTag.PatientName)]
          public string Name
          {
              get;
              set;
          }
      }

      [DicomKey(DicomDirKeyType.Study)]
      public class StudyEntity
      {
          [Element(DicomTag.PatientID)]
          [DicomKey(DicomDirKeyType.Patient)]
          public string PatientId
          {
              get;
              set;
          }

          [Element(DicomTag.StudyDate)]
          public DateTime? Date
          {
              get;
              set;
          }

          [Element(DicomTag.StudyTime)]
          public DateTime? Time
          {
              get;
              set;
          }

          [Element(DicomTag.StudyDescription)]
          public string Description
          {
              get;
              set;
          }

          [Element(DicomTag.StudyInstanceUID)]
          public string InstanceUID
          {
              get;
              set;
          }

          [Element(DicomTag.StudyID)]
          public string Id
          {
              get;
              set;
          }

          [Element(DicomTag.AccessionNumber)]
          public string AccessionNumber
          {
              get;
              set;
          }
      }


      public void TestDicomLinq()
      {
          DicomEngine.Startup();

          using (DicomDataSet ds = new DicomDataSet())
          {
              ds.Load(_DicomDirFile, DicomDataSetLoadFlags.None);
              FindPatients(ds);
              FindStudies(ds);
              FindPatientStudy(ds);
          }

          DicomEngine.Shutdown();
      }

      private void FindPatients(DicomDataSet ds)
      {
          var patients = from patient in ds.DirectoryRecord&lt;PatientEntity&gt;()
                         select new { Name = patient.Name, Id = patient.Id };

          foreach (var patient in patients)
          {
              Console.WriteLine("Id: " + patient.Id);
              Console.WriteLine("Name: " + patient.Name);
          }
      }

      private void FindStudies(DicomDataSet ds)
      {
           var studies = from study in ds.DirectoryRecord&lt;StudyEntity&gt;()
                         select study;

           foreach (var study in studies)
           {
               Console.WriteLine("Patient Id: " + study.PatientId);
               Console.WriteLine("Accession #: " + study.AccessionNumber);
               Console.WriteLine("Study Id: " +study.Id);
           }
      }

      private void FindPatientStudy(DicomDataSet ds)
      {
          var query = from patient in ds.DirectoryRecord&lt;PatientEntity&gt;()                      
                      select new
                      {
                          patient,
                          Studies = from study in ds.DirectoryRecord&lt;StudyEntity&gt;()
                                    where study.PatientId == patient.Id
                                    select study
                      };

          foreach (var item in query)
          {
              Console.WriteLine("Patient: " + item.patient.Id);
              foreach (StudyEntity study in item.Studies)
              {
                  Console.WriteLine("    Instance UID: " + study.InstanceUID);
              }
          }
      }
</code>
        <!--Dicom.Linq-->
      </example>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.IgnoreAttribute">
      <summary>
            Use to mark a property as ignored.  If a property is marked as ignored it will be skipped by the 
            Get dataset extension method.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.EnhancedEncoding">
      <summary>
            Defines additional code sequence coding information.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.EnhancedEncoding.ContextIdentifier">
      <summary>
            Gets or sets the context identifier.
            </summary>
      <value>The context identifier.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.EnhancedEncoding.MappingResource">
      <summary>
            Gets or sets the mapping resource.
            </summary>
      <value>The mapping resource.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.EnhancedEncoding.ContextGroupVersion">
      <summary>
            Gets or sets the context group version.
            </summary>
      <value>The context group version.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.EnhancedEncoding.ContextGroupExtensionFlag">
      <summary>
            Gets or sets the context group extension flag.
            </summary>
      <value>The context group extension flag.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.EnhancedEncoding.ContextGroupLocalVersion">
      <summary>
            Gets or sets the context group local version.
            </summary>
      <value>The context group local version.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.EnhancedEncoding.ContextGroupExtensionCreatorUid">
      <summary>
            Gets or sets the context group extension creator uid.
            </summary>
      <value>The context group extension creator uid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.SoftCopyVoiLutModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ModalityLutModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.ShortDateTypeConverter">
      <summary>
            Provides a type converter to convert a DateTime to a short date representation.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.ShortDateTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.ShortDateTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given value object from the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.ShortDateTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Indicates whether the given value object can be converted from the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter from.</param>
      <returns>
            true if the given value object can be converted from the specified type, using the specified context and culture information; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.PersonNameConverter">
      <summary>
            Provides a type converter to convert a PersonName object to an from a string.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> should be called to find the properties of this object. This method never returns false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.PersonNameConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.EnumValueConverter`1">
      <summary>
            Provides a type converter to convert Enum object to an from a string.
            </summary>
      <typeparam name="T">Type of enumeration.</typeparam>
      <remarks>In addition to the enum value this converter works with the EnumValueAttribute to extract an additional descriptive name
            for the enumeration.
            </remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.EnumValueConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.EnumValueConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.EnumValueConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.EnumValueConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.SopInstance">
      <summary>
            Class that defines SOP instance information.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.SopInstance.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.SopInstance" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.SopInstance.Import(Leadtools.Dicom.DicomDataSet)">
      <summary>
            Imports the SOP instance information from the specified dataset.
            </summary>
      <param name="dataset">The dataset to import from.</param>
      <returns>A new SOPInstance class that has the SOP instance information from the provided dataset.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SopInstance.SOPClassUid">
      <summary>
            Gets or sets the SOP class uid.
            </summary>
      <value>The SOP class uid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.SopInstance.SOPInstanceUid">
      <summary>
            Gets or sets the SOP instance uid.
            </summary>
      <value>The SOP instance uid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatient">
      <summary>
            Provides the necessary information to merge patient via the Patient Updater DICOM Service.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatient.PatientId">
      <summary>
            Gets or sets the patient id that is being merged.
            </summary>
      <value>
            The patient id.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.MergePatient.PatientToMerge">
      <summary>
            Gets or sets the patient id to merge to.
            </summary>
      <value>
            The patient to merge.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.CommonInstanceReferenceModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
      <exclude />
    </member>
    <member name="P:Leadtools.Dicom.Common.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
      <exclude />
      <excludetoc />
    </member>
    <member name="P:Leadtools.Dicom.Common.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
      <exclude />
    </member>
    <member name="P:Leadtools.Dicom.Common.Properties.Resources.AddItem">
      <summary>
              Looks up a localized string similar to Add Item.
            </summary>
      <exclude />
    </member>
    <member name="P:Leadtools.Dicom.Common.Properties.Resources.AddTag">
      <summary>
              Looks up a localized string similar to Add Tag.
            </summary>
      <exclude />
    </member>
    <member name="P:Leadtools.Dicom.Common.Properties.Resources.DeleteTag">
      <summary>
              Looks up a localized string similar to DeleteTag.
            </summary>
      <exclude />
    </member>
    <member name="P:Leadtools.Dicom.Common.Properties.Resources.HideTagInfo">
      <summary>
              Looks up a localized string similar to Hide Tag Info.
            </summary>
      <exclude />
    </member>
    <member name="P:Leadtools.Dicom.Common.Properties.Resources.LeadXml">
      <summary>
               Looks up a localized string similar to &lt;?xml version="1.0" encoding="UTF-8"?&gt;
            &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
            	&lt;xs:element name="element"&gt;
            		&lt;xs:complexType&gt;
            			&lt;xs:simpleContent&gt;
            				&lt;xs:extension base="xs:string"&gt;
            					&lt;xs:attribute name="vr" use="required"&gt;
            						&lt;xs:simpleType&gt;
            							&lt;xs:restriction base="xs:string"&gt;
            								&lt;xs:enumeration value="AE"/&gt;
            								&lt;xs:enumeration value="AS"/&gt;
            								&lt;xs:enumeration value="AT"/&gt;
            								&lt;xs:enumeration value="CS"/&gt;
            								&lt;xs:enumeration value="DA"/&gt;
            				 [rest of string was truncated]";.
             </summary>
      <exclude />
    </member>
    <member name="P:Leadtools.Dicom.Common.Properties.Resources.ShowTagInfo">
      <summary>
              Looks up a localized string similar to Show Tag Info.
            </summary>
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.GraphicAnnotation">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.UI.RasterImageEditor">
      <summary>
            Provides a user interface than can edit a RasterImage object time value.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.RasterImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Indicates whether the specified context supports painting a representation of an object's value within the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
            true if <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)" /> is implemented; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.RasterImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
            Paints a representation of the value of an object using the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs" />.
            </summary>
      <param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs" /> that indicates what to paint and where to paint it.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.RasterImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method. If the <see cref="T:System.Drawing.Design.UITypeEditor" /> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.RasterImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
      <param name="value">The object to edit.</param>
      <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Linq.Queryable`1">
      <summary>
            A default implemenation of IQueryable.
            </summary>
      <typeparam name="T">The type of data in the datasource.</typeparam>
      <noexample />
      <remarks>This class is intended for use by query providers implemented by LEADTOOLS.  Currently this class is only used, for
            querying DICOMDIR.</remarks>
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.Queryable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Linq.Queryable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Linq.Queryable`1.ElementType">
      <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable" /> is executed.
            </summary>
      <value>
            A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Linq.Queryable`1.Expression">
      <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.
            </summary>
      <value>
            The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Linq.Queryable`1.Provider">
      <summary>
            Gets the query provider that is associated with this data source.
            </summary>
      <value>
            The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.RelatedSeries">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.PresentationStateRelationshipModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.PresentationStateBlendingModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.GraphicObject">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.OriginalAttribute">
      <summary>
            Contains information on an attribute that was removed or replaced by other values in the DICOM dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.OriginalAttribute.SourceOfPreviousValues">
      <summary>
            Gets or sets the source of previous values.
            </summary>
      <value>The source of previous values.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.OriginalAttribute.AttributeModificationDateTime">
      <summary>
            Gets or sets the attribute modification date time.
            </summary>
      <value>The attribute modification date time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.OriginalAttribute.ModifyingSystem">
      <summary>
            Gets or sets the modifying system.
            </summary>
      <value>The system that remove/replace the attributes.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.OriginalAttribute.ReasonForTheAttributeModification">
      <summary>
            Gets or sets the reason for the attribute modification.
            </summary>
      <value>The reason for the attribute modification.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.OriginalAttribute.ModifiedAttributesSequence">
      <summary>
            Gets or sets the modified attributes sequence.
            </summary>
      <value>The modified attributes sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.UI.NullableTimeEditor">
      <summary>
            Provides a user interface than can edit a nullable time value.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.NullableTimeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
      <param name="value">The object to edit.</param>
      <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.UI.NullableTimeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method. If the <see cref="T:System.Drawing.Design.UITypeEditor" /> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.TimeRange">
      <summary>
            Represents a time range.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.TimeRange.Equals(Leadtools.Dicom.Common.DataTypes.TimeRange)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.TimeRange.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.TimeRange.StartTime">
      <summary>
            Gets or sets the start time.
            </summary>
      <value>The start time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.TimeRange.EndTime">
      <summary>
            Gets or sets the end time.
            </summary>
      <value>The end time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement">
      <summary>
            Manages a DICOM service class that can instruct a SCP to create Interchange Media containing a set of 
            composite SOP instances.
            </summary>
      <remarks>The SOP instances will have to be already located at the SCP.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.SopCommon">
      <summary>
            Gets or sets the sop common information.
            </summary>
      <value>The sop common information for this media request.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.MediaSet">
      <summary>
            Gets or sets the media set.
            </summary>
      <value>The volume the DICOM media is written to.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.RequestInformation">
      <summary>
            Gets or sets the request information.
            </summary>
      <value>The information that is used during an Initiate Media Creation request.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.UseLabelInformationFromInstances">
      <summary>
            Gets or sets the value specifying whether to exract information from the intances to use as the label.
            </summary>
      <value>Yes to extract label information from the instances, no otherwise.</value>
      <remarks>It is at the descretion of the SCP as to what information to extract for use as a label.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.LabelText">
      <summary>
            Gets or sets the label text.
            </summary>
      <value>Additional text to include on any label.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.LabelStyleSelection">
      <summary>
            Gets or sets the label style selection.
            </summary>
      <value>Specifies an implementation specific style of labeling.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.MediaDisposition">
      <summary>
            Gets or sets the media disposition.
            </summary>
      <value>Specifices where and to whom to send the media when completed.</value>
      <remarks>For example, it may contain the name and address of a referring doctor.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.BarcodeValue">
      <summary>
            Gets or sets the barcode value.
            </summary>
      <value>The barcode value.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.BarcodeSymbology">
      <summary>
            Gets or sets the barcode symbology.
            </summary>
      <value>The barcode symbology.</value>
      <remarks>Defines the specific type of barcode.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.AllowMediaSplitting">
      <summary>
            Gets or sets the value specifying whether or not to allow media splitting.
            </summary>
      <value>Yes to allow media splitting, no otherwise.</value>
      <remarks>The SCP may not have the capability to split media.  If the file-set size exceeds the media storage capacity, and 
            AllowMediaSplitting has been set to know the SCP may refuse to process the request.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.AllowLossyCompression">
      <summary>
            Gets or sets the the value spcifying whether or not to allow lossy compression.
            </summary>
      <value>Yes to allow lossy compression, no otherwise.</value>
      <remarks>If allow lossy compression is allow but the requested profile does not permit it, the SCP shall not
            perform lossy compression.  The level lossy compression is at the SCP descretion.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.AllowNonDicomObjects">
      <summary>
            Gets or sets the value specifying wheter to include non-DICOM objects(e.g., HTML files, JPEG images) that are a rendering of the DICOM instances, on the created media.
            </summary>
      <value>Yes to allow non-DICOM object, no otherwise.</value>
      <remarks>The SCP is not required to be able to add such files.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.IncludeDisplayApplication">
      <summary>
            Gets or sets the the value specifying whether or not to include a display application.
            </summary>
      <value>Yes to include a display application, not otherwise.</value>
      <remarks>The SCP may or may not have the capability to include an application to display the DICOM instances on the 
            created media.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.PreserveCompositeInstancesAfterMediaCreation">
      <summary>
            Gets or sets the value specifying whether or not to preserve composite instances after media creation.
            </summary>
      <value>Yes to preserve composite instances after media creation, no otherwise.</value>
      <remarks>This value serves as a hint to the SCP.  Even if the SCU specifices Yes, the SCP may flush its cache
            of instances at its discretion.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.ReferencedSopSequence">
      <summary>
            Gets or sets the referenced sop sequence.
            </summary>
      <value>
            The list of sop instances to be use in the media creation request.
            </value>
      <remarks>The sop instances need to already be present on the SCP.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.MediaCreation.MediaCreationManagement.ExecutionStatus">
      <summary>
            Gets or sets the execution status.
            </summary>
      <value>The execution status of the media creation request.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Attributes.InstanceAttribute">
      <summary>
            Specifies what DICOM class type and abstract syntax to use in DICOM communications.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Attributes.InstanceAttribute.#ctor(Leadtools.Dicom.DicomClassType,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Attributes.InstanceAttribute" /> class.
            </summary>
      <param name="classType">Represents the constants that are used to indicate the Class Information Object Definitions.</param>
      <param name="abstractSyntax">The abstract syntax.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Attributes.InstanceAttribute.ClassType">
      <summary>
            Gets or sets the type of the class.
            </summary>
      <value>Represents the constants that are used to indicate the Class Information Object Definitions.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.Attributes.InstanceAttribute.AbstractSyntax">
      <summary>
            Gets or sets the abstract syntax.
            </summary>
      <value>The abstract syntax.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.GraphicAnnotationModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.ElementAttribute">
      <summary>
            Specifies what element to associate to the object this attribute is bound to.
            </summary>
      <noremarks />
      <example>
        <para>This example gets and sets custom DICOM class information.</para>
        <code lang="VB">      Public Class MyPatientInfo
         Private _PatientName As PersonName

         &lt;Element(DicomTag.PatientName,Optional := True), TypeConverter(GetType(PersonNameConverter))&gt; _
         Public Property PatientName() As PersonName
            Get
               Return _PatientName
            End Get
            Set
               _PatientName = Value
            End Set
         End Property

         Private _PatientID As String
         &lt;Element(DicomTag.PatientID,Optional:=False)&gt; _
         Public Property PatientID() As String
            Get
               Return _PatientID
            End Get
            Set
               _PatientID = Value
            End Set
         End Property
      End Class

      &lt;Test&gt; _
      Public Sub ExtractInfoExample()
         Dim dicomFileNameIn As String = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE2.dcm")
         Dim info As MyPatientInfo = Nothing

         ' Initialize DICOM engine
         DicomEngine.Startup()

         Dim ds As DicomDataSet = New DicomDataSet()

         ' Load an existing DICOM file
         ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None)
         ' Fill the class with the appropriate dicom info
         info = ds.Get(Of MyPatientInfo)()
         If Not info Is Nothing Then
            '
            ' Display information extracted from DICOM file.
            '
            Console.WriteLine("Patient Name: " &amp; info.PatientName.Full)
            Console.WriteLine("Patient ID: " &amp; info.PatientID)

            '
            ' Change the patient id
            '
            info.PatientID = "12345"
            ds.Set(info)

            If ds.GetValue(Of String)(DicomTag.PatientID, String.Empty) = "12345" Then
               Console.WriteLine("Patient successfully changed")
            End If
         End If
         DicomEngine.Shutdown()
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        public class MyPatientInfo
        {           
            private PersonName _PatientName;

            [Element(DicomTag.PatientName,Optional = true)]
            [TypeConverter(typeof(PersonNameConverter))]
            public PersonName PatientName
            {
                get { return _PatientName; }
                set { _PatientName = value; }
            }

            private string _PatientID;
            [Element(DicomTag.PatientID,Optional=false)]
            public string PatientID
            {
                get { return _PatientID; }
                set { _PatientID = value; }
            }
        }


        public void ExtractInfoExample()
        {
            string dicomFileNameIn = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE2.dcm");
            MyPatientInfo info = null;

            // Initialize DICOM engine
            DicomEngine.Startup();

            DicomDataSet ds = new DicomDataSet();

            // Load an existing DICOM file
            ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None);
            // Fill the class with the appropriate dicom info
            info = ds.Get&lt;MyPatientInfo&gt;();
            if (info != null)
            {
                //
                // Display information extracted from DICOM file.
                //
                Console.WriteLine("Patient Name: " + info.PatientName.Full);
                Console.WriteLine("Patient ID: " + info.PatientID);

                //
                // Change the patient id
                //
                info.PatientID = "12345";
                ds.Set(info);

                if (ds.GetValue&lt;string&gt;(DicomTag.PatientID, string.Empty) == "12345")
                    Console.WriteLine("Patient successfully changed");
            }
            DicomEngine.Shutdown();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--ParsingSample.GetSet-->
      </example>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementAttribute.Tag">
      <summary>
            The data element tag. 
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementAttribute.DefaultValue">
      <summary>
            The default value for the element.  If the element doesn't exist this default value is used.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementAttribute.Index">
      <summary>
            The index of the item to get.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementAttribute.Optional">
      <summary>
            True if the element is an optional element, false otherwise.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementAttribute.Requirement">
      <summary>
            Specifies the type of usage for the DICOM element.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.ElementAttribute.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Extensions.ElementAttribute" /> class.
            </summary>
      <param name="Tag">The DICOM element tag.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.ElementAttribute.#ctor(System.Int64,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.Extensions.ElementAttribute" /> class.
            </summary>
      <param name="Tag">The DICOM element tag.</param>
      <param name="defaultValue">The default value for the DICOM element.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.EnumValueListConverter`1">
      <summary>
            Provides a type converter to convert Enum object to an from a string.
            </summary>
      <typeparam name="T">Type of enumeration.</typeparam>
      <remarks>In addition to the enum value this converter works with the EnumValueAttribute to extract an additional descriptive name
            for the enumeration.
            </remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.EnumValueListConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.EnumValueListConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.EnumValueListConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.EnumValueListConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.EncryptedAttribute">
      <summary>
            Holds information about encryped content in a dicom dataset.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.EncryptedAttribute.EncryptedContentTransferSyntaxUID">
      <summary>
            Gets or sets the encrypted content transfer syntax UID.
            </summary>
      <value>The encrypted content transfer syntax UID.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.EncryptedAttribute.EncryptedContent">
      <summary>
            Gets or sets the content of the encrypted items.
            </summary>
      <value>The content of the encrypted data.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyPatient">
      <summary>
            Provides the necessary information to copy a patient to a new patient via the Patient Updater DICOM Service.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyPatient.OriginalPatientId">
      <summary>
            Gets or sets the original patient id.
            </summary>
      <value>
            The original patient id.  The patient information will be copied from this patient.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyPatient.PatientId">
      <summary>
            Gets or sets the patient id.
            </summary>
      <value>
            The patient id.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyPatient.Name">
      <summary>
            Gets or sets the patient name.
            </summary>
      <value>
            The patient name.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyPatient.Sex">
      <summary>
            Gets or sets the patient sex.
            </summary>
      <value>
            The patient sex.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.CopyPatient.Birthdate">
      <summary>
            Gets or sets the patient birthdate.
            </summary>
      <value>
            The patient birthdate.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ContentItem">
      <summary>
            Provides a flexible means of encoding attribute identifers and attribute values using the DICOM Code Sequence Macro.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.ValueType">
      <summary>
            Gets or sets the type of the value.
            </summary>
      <value>The type of the value.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.ConceptNameCodeSequence">
      <summary>
            Gets or sets the concept name code sequence.
            </summary>
      <value>The concept name code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.DateTime">
      <summary>
            Gets or sets the date time.
            </summary>
      <value>The date time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.Date">
      <summary>
            Gets or sets the date.
            </summary>
      <value>The date.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.Time">
      <summary>
            Gets or sets the time.
            </summary>
      <value>The time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.PersonName">
      <summary>
            Gets or sets the name of the person.
            </summary>
      <value>The name of the person.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.Uid">
      <summary>
            Gets or sets the uid.
            </summary>
      <value>The uid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.TextValue">
      <summary>
            Gets or sets the text value.
            </summary>
      <value>The text value.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.ConceptCodeSequence">
      <summary>
            Gets or sets the concept code sequence.
            </summary>
      <value>The concept code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.NumericValue">
      <summary>
            Gets or sets the numeric value.
            </summary>
      <value>The numeric value.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ContentItem.MeasurementUnitsCodeSequence">
      <summary>
            Gets or sets the measurement units code sequence.
            </summary>
      <value>The measurement units code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ClinicalTrialStudyModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.BreedRegistration">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.StructuredDisplay.StructuredDisplayReferencedImage">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.PresentationStateRelationShip">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PresentationState.BitmapDisplayShutterModule">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.HierarchicalSeries">
      <exclude />
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags">
      <summary>
            Specifies flags to be used with the <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)" /> methods.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags.None">
      <summary>
            When loading a DICOM xml input file, all data (binary and non-binary) will be read from the xml file (i.e PixelData).
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags.IgnoreBinaryData">
      <summary>
            When loading a DICOM xml input file, all binary data in the xml input file will be ignored.  Note that the DICOM elements that contain the binary data will still be inserted into the DicomDataSet, but with no value.
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags.IgnoreAllData">
      <summary>
            When loading a DICOM xml input file, all data in the xml input file will be ignored.  Note that all DICOM elements in the xml file will still be inserted into the DicomDataSet, but with no value.
            </summary>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags">
      <summary>
            Specifies flags to be used with the <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)" /> methods.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags.None">
      <summary>
            Pass this value if you do not want to use any other flags.  This uses the defaults.
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags.IgnoreBinaryData">
      <summary>
            If a DICOM element contains binary data, do not write the binary data to the output xml file.  The element itself is still exported, but with no data.
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags.IgnoreAllData">
      <summary>
            Do not write any data (binary, text, etc.) for the DICOM elements to the output xml file.  All elements are still exported, but with no data.
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags.EncodeBinaryBase64">
      <summary>
            Encode all binary data as Base64.  This is the default behavior.
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags.EncodeBinaryBinHex">
      <summary>
            Encode all binary data as BinHex.  This overrides the default behavior of encoding binary data has Base64.
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags.TagWithCommas">
      <summary>
            When writing DICOM tags to the output xml file, use commas. For example,the tag for SOPClassUID would be written as '0008,0016' instead of '00080016'
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags.TrimWhiteSpace">
      <summary>
            When writing data to the output xml file, trim leading and trailing white space
            </summary>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.DicomXmlNodeType">
      <summary>
            Used in the <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlData" /> object to identify the type of the xml node that is about to be written to the xml output file.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomXmlNodeType.None">
      <summary>
            Type of the xml node is unknown.
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomXmlNodeType.Element">
      <summary>
            The xml node is an xml element.
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.DicomXmlNodeType.Comment">
      <summary>
            The xml node is an xml comment.
            </summary>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.SaveXmlData">
      <summary>
             Data for the <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate.
             </summary>
      <keywords>DicomDataSet|Delegates|Callbacks</keywords>
      <remarks>A <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlData" /> object is passed to 
             the <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate every time a DICOM element is about to be written to the output xml file.
             The members of <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlData" /> give information about the DICOM element, and can be modified to customize the look of the output xml file.
            </remarks>
      <example>
             For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
             </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)" />
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)" />
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)" />
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)" />
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)" />
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)" />
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" />
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" />
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback" />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.SaveXmlData.Reset">
      <summary>
            Resets all members of the class to default values, and empties the attributes dictionary.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.SaveXmlData.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlData" />.
            </summary>
      <keywords>Delegates|Callbacks</keywords>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.SaveXmlData.Attributes">
      <summary>
            Contains a dictionary of string pairs that correspond to each attribute that is about to be written to the output xml file.
            </summary>
      <value>
            A dictionary of string pairs that correspond to each attribute that is about to be written to the output xml file
            </value>
      <remarks>
            This can be modified in the in the <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate to add, remove, or change the attributes that will be written to the output xml file.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.SaveXmlData.NodeType">
      <summary>
            Identifies the type of the xml node that is about to be written to the xml output file.
            </summary>
      <value>
            The type of the xml node that is about to be written to the xml output file
            </value>
      <remarks>
            This value cannot be changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.SaveXmlData.ElementName">
      <summary>
            Identifies the name of the xml element that is about to be written.
            </summary>
      <value>
            The name of the xml element that is about to be written.
            </value>
      <remarks>
            By default, this is either 'dataset' or 'element'.  This value can be changed in the <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.SaveXmlData.ElementValue">
      <summary>
            Identifies the value of the xml element that is about to be written.
            </summary>
      <value>
            The value of the xml element that is about to be written.
            </value>
      <remarks>
            This corresponds to a DICOM element value  This value can be changed in the <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.SaveXmlData.HasChildElements">
      <summary>
            Gets a value indicating whether this element has children.
            </summary>
      <value>
            true if this element has children; false otherwise.
            </value>
      <remarks>
            Generally, if an DICOM element is a sequence or an item, it will have children.  This value can not be changed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.SaveXmlData.Comment">
      <summary>
            If the <see cref="P:Leadtools.Dicom.Common.Extensions.SaveXmlData.NodeType" /> is <see cref="T:Leadtools.Dicom.Common.Extensions.DicomXmlNodeType">DicomXmlNodeType.Comment</see>, then this contains the comment that is about to be written.
            </summary>
      <value>
            The comment that is about to be written.
            </value>
      <remarks>
            This value can be changed in the <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback" /> delegate
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.ElementDataType">
      <summary>
            Describes the type of the xml element data that is being processed.
            </summary>
      <remarks>
            When calling <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)" /> and passing a <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" /> delegate, 
            the <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" /> is called for each element in the xml input file, and a 
            <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData" /> member is returned as part of the delegate.
            The <see cref="T:Leadtools.Dicom.Common.Extensions.ElementDataType" /> enum is used 
            in the <see cref="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Encoding" /> 
            member of <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementDataType.None">
      <summary>
            Input xml file element has unknown value
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementDataType.String">
      <summary>
            Input xml file element has a string value
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementDataType.Base64">
      <summary>
            Input xml file element has Base64 encoded value
            </summary>
    </member>
    <member name="F:Leadtools.Dicom.Common.Extensions.ElementDataType.BinHex">
      <summary>
            Input xml file element has BinHex encoded value
            </summary>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData">
      <summary>
             Data for the <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" /> delegate.
             </summary>
      <keywords>DicomDataSet|Delegates|Callbacks</keywords>
      <remarks>
        <para>
             A <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData" /> object is passed to 
             the <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback" /> delegate for each DICOM element is about to be written to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.
             The members of <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData" /> give information about the DICOM element, 
             and can be modified to change the elements and data that are added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.  
             The following table identifies which members are information only, and which elements can be changed.  
             Note that if you are using this delegate to read a non-standard LEAD DICOM xml file, you must fill in the non-informational elements.
             </para>
        <table>
          <tr>
            <th>Member</th>
            <th>Use</th>
          </tr>
          <tr>
            <td>CallbackType</td>
            <td>information only</td>
          </tr>
          <tr>
            <td>Tag</td>
            <td>can be changed</td>
          </tr>
          <tr>
            <td>Vr</td>
            <td>can be changed</td>
          </tr>
          <tr>
            <td>Encoding</td>
            <td>can be changed</td>
          </tr>
          <tr>
            <td>ElementValue</td>
            <td>can be changed</td>
          </tr>
          <tr>
            <td>attributes</td>
            <td>information only</td>
          </tr>
          <tr>
            <td>HasChildElements</td>
            <td>information only</td>
          </tr>
          <tr>
            <td>ElementName</td>
            <td>information only</td>
          </tr>
          <tr>
            <td>DicomDataSet</td>
            <td>information only</td>
          </tr>
          <tr>
            <td>DicomElement</td>
            <td>information only</td>
          </tr>
        </table>
      </remarks>
      <example>
             For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
             </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Reset">
      <summary>
            Resets all members of the class to default values, and empties the attributes dictionary.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData" />.
            </summary>
      <keywords>Delegates|Callbacks</keywords>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Attributes">
      <summary>
            Gets a value that contains a dictionary of string pairs that correspond to each attribute in the xml input file.
            </summary>
      <value>
            The dictionary of string pairs that correspond to each attribute in the xml input file.
            </value>
      <remarks>
            This is for informational purposes only.
            Modifying this has no effect.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Tag">
      <summary>
            Gets a value that contains the tag of the DICOM element that is about to be added to the DicomDataSet.
            </summary>
      <value>
            The tag of the DICOM element that is about to be added to the DicomDataSet.
            </value>
      <remarks>
            Modifying <see cref="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Tag" /> changes the element that is added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Vr">
      <summary>
            Gets a value representation of the DICOM element that is about to be added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.
            </summary>
      <value>
            The value representation of the DICOM element that is about to be added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.
            </value>
      <remarks>
            Modifying <see cref="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Vr" /> changes the element that is added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Encoding">
      <summary>
            Gets a value that indicates the encoding of the xml element data.
            </summary>
      <value>
            The encoding of the xml element data.
            </value>
      <remarks>
            Modifying <see cref="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.Encoding" /> changes how the xml element value is decoded.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.HasChildElements">
      <summary>
            Gets a value indicating if this element has children.
            </summary>
      <value>
            true if this element has children; false otherwise.
            </value>
      <remarks>
            Generally, if an DICOM element is a sequence or an item, it will have children.  
            Modifying this has no effect.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.ElementValue">
      <summary>
            Gets a value that indicates the string value of the xml element being read.
            </summary>
      <value>
            The string value of the xml element being read.
            </value>
      <remarks>
            If <see cref="T:Leadtools.Dicom.Common.Extensions.ElementDataType" /> is <see cref="T:Leadtools.Dicom.Common.Extensions.ElementDataType">ElementDataType.String</see>, 
            then this is will be the value assigned to the <see cref="T:Leadtools.Dicom.DicomElement" /> that will be be created.
                  
            If <see cref="T:Leadtools.Dicom.Common.Extensions.ElementDataType" /> is <see cref="T:Leadtools.Dicom.Common.Extensions.ElementDataType">ElementDataType.Base64</see> or
            is <see cref="T:Leadtools.Dicom.Common.Extensions.ElementDataType">ElementDataType.BinHex</see>, then <see cref="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.ElementValue" /> contains a string that will be decoded accordingly,
            and then assigned to the <see cref="T:Leadtools.Dicom.DicomElement" /> that will be be created.
            <para>
            Modifying <see cref="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.ElementValue" /> changes the value that will be written for the <see cref="T:Leadtools.Dicom.DicomElement" />.
            </para></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData.ElementName">
      <summary>
            Gets a value that is the name of the element as it appears in the input xml file.  
            </summary>
      <value>
            The name of the element as it appears in the input xml file.  
            </value>
      <remarks>
            The default value for this is 'element'.  Modifying this has no effect.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData">
      <summary>
             Data for the <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback" /> delegate.
             </summary>
      <keywords>DicomDataSet|Delegates|Callbacks</keywords>
      <remarks>
        <para>
             A <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData" /> object is passed to 
             the <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback" /> delegate once for each DICOM element after it has been added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.
             The members of <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData" /> give information about the DICOM element, 
             and can be modified to change the elements and data that are added to the <see cref="T:Leadtools.Dicom.DicomDataSet" /> so you can change the value of the element.
             This is useful if you want to load a <see cref="T:Leadtools.Dicom.DicomDataSet" /> from an input DICOM xml file that does not contain image data.  
             After adding the <see cref="F:Leadtools.Dicom.DicomTag.PixelData" /> element,
             pixel data can be loaded from another location.
             </para>
      </remarks>
      <example>
             For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
             </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData.Reset">
      <summary>
            Resets all members of the class to default values, and empties the attributes dictionary.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData" />.
            </summary>
      <keywords>Delegates|Callbacks</keywords>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData.DicomDataSet">
      <summary>
            Gets a value representing the <see cref="T:Leadtools.Dicom.DicomDataSet" /> that is being loaded with DICOM tags and values corresponding to the input xml file.
            </summary>
      <value>
            The <see cref="T:Leadtools.Dicom.DicomDataSet" /> that is being loaded with DICOM tags and values corresponding to the input xml file.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="P:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData.DicomElement">
      <summary>
            Gets a value representing the <see cref="T:Leadtools.Dicom.DicomElement" /> that has just been added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.  
            </summary>
      <value>
            The <see cref="T:Leadtools.Dicom.DicomElement" /> that has just been added to the <see cref="T:Leadtools.Dicom.DicomDataSet" />.  
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      <summary>
            Optional delegate method that is used with the SaveXml methods.  
            </summary>
      <keywords>
            Callbacks|delegate
            </keywords>
      <param name="data">
            An instance of the <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlData" /> interface containing the progress callback data.
            </param>
      <returns>
            return true to write this DICOM element in the output xml file; return false to skip writing this element in the output xml file
            </returns>
      <remarks>
            This delegate is called once for each DICOM element before it is written to the XML file.
            </remarks>
      <example>
        <para>This example loads a sample DICOM file, and saves the contents as an xml file.  
            The xml file output is customized by using the SaveXmlCallback delegate.
            <list><item>'element' is changed to 'element_newname'</item><item>'tag' attribute is changed to 'tag_newname'</item><item>add an attribute to the 'dataset' element: 'new_attribute'</item><item>a comment is added: 'NEW COMMENT: customized xml file using the SaveXmlCallback'</item></list>
            Then the customized xml file is read into a DicomDataSet object using the LoadXmlCallback</para>
        <code lang="VB">      Public Sub SaveXmlCallbackExample()
         Dim dicomFileNameIn As String = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE3.dcm")
         Dim xmlFileNameOut As String = Path.Combine(LEAD_VARS.ImagesDir, "test.xml")
         Dim dicomFileNameOut As String = Path.Combine(LEAD_VARS.ImagesDir, "test.dcm")

         ' Initialize DICOM engine
         DicomEngine.Startup()

         Dim ds As DicomDataSet = New DicomDataSet()

         ' Load an existing DICOM file
         ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None)

         ' Save as XML to a file with no binary data
         ' For the demo, keep the xml output file size small by skipping the pixel data
         ' Use the SaveXmlCallback delegate to customize the xml file
         Dim xmlFlags As DicomDataSetSaveXmlFlags = DicomDataSetSaveXmlFlags.IgnoreBinaryData Or DicomDataSetSaveXmlFlags.TrimWhiteSpace Or DicomDataSetSaveXmlFlags.TagWithCommas

         ds.SaveXml(xmlFileNameOut, xmlFlags, New SaveXmlCallback(AddressOf MySaveXmlCallback))

         ' Use a LoadmlCallback to read the customized xml file
         ds.LoadXml(xmlFileNameOut, DicomDataSetLoadXmlFlags.None, New LoadXmlBeforeElementCallback(AddressOf MyLoadXmlBeforeElementCallback), New LoadXmlAfterElementCallback(AddressOf MyLoadXmlAfterElementCallback))

         ' Save the result -- there will be no pixel data
         ds.Save(dicomFileNameOut, DicomDataSetSaveFlags.None)

         DicomEngine.Shutdown()
      End Sub

      Private Function MySaveXmlCallback(ByVal data As SaveXmlData) As Boolean
         'string sTag = data.attributes["tag"];
         'if (sTag.StartsWith("0008"))
         '   return false;
         If data.NodeType = DicomXmlNodeType.Comment Then
            data.Comment = "COMMENT: customized xml file using the SaveXmlCallback"
            Return False
         End If

         If data.ElementName = "dataset" Then
            data.Attributes.Add("new_attribute", "some_value")
         ElseIf data.ElementName = "element" Then
            data.ElementName = "element_newname"
            Dim sTagValue As String = data.Attributes("tag")
            data.Attributes.Remove("tag")
            data.Attributes.Add("tag_newname", sTagValue)
         End If
         Return True
      End Function

      Private Function MyLoadXmlBeforeElementCallback(ByVal data As LoadXmlBeforeElementData) As Boolean
         Dim sTagValue As String = data.Attributes("tag_newname")
         Dim tag As Long = 0
         sTagValue = sTagValue.Replace(",", String.Empty)
         If Long.TryParse(sTagValue, System.Globalization.NumberStyles.HexNumber, Nothing, tag) Then
            data.Tag = tag
         End If
         Return True
      End Function

      Private Sub MyLoadXmlAfterElementCallback(ByVal data As LoadXmlAfterElementData)
         If data.DicomElement.Tag = DicomTag.PixelData Then
            ' here you could call one of the following to set the pixel data
            '    data.DicomDataSet.SetBinaryValue 
            '    data.DicomDataSet.SetImage()
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SaveXmlCallbackExample()
      {
         string dicomFileNameIn = Path.Combine(LEAD_VARS.ImagesDir, "IMAGE3.dcm");
         string xmlFileNameOut = Path.Combine(LEAD_VARS.ImagesDir, "test.xml");
         string dicomFileNameOut = Path.Combine(LEAD_VARS.ImagesDir, "test.dcm");

         // Initialize DICOM engine
         DicomEngine.Startup();

         DicomDataSet ds = new DicomDataSet();

         // Load an existing DICOM file
         ds.Load(dicomFileNameIn, DicomDataSetLoadFlags.None);

         // Save as XML to a file with no binary data
         // For the demo, keep the xml output file size small by skipping the pixel data
         // Use the SaveXmlCallback delegate to customize the xml file
         DicomDataSetSaveXmlFlags xmlFlags =
            DicomDataSetSaveXmlFlags.IgnoreBinaryData |
            DicomDataSetSaveXmlFlags.TrimWhiteSpace |
            DicomDataSetSaveXmlFlags.TagWithCommas;

         ds.SaveXml(xmlFileNameOut, xmlFlags, new SaveXmlCallback(MySaveXmlCallback));

         // Use a LoadmlCallback to read the customized xml file
         ds.LoadXml(xmlFileNameOut, DicomDataSetLoadXmlFlags.None, new LoadXmlBeforeElementCallback(MyLoadXmlBeforeElementCallback), new LoadXmlAfterElementCallback(MyLoadXmlAfterElementCallback));

         // Save the result -- there will be no pixel data
         ds.Save(dicomFileNameOut, DicomDataSetSaveFlags.None);

         DicomEngine.Shutdown();
      }

      private bool MySaveXmlCallback(SaveXmlData data)
      {
         //string sTag = data.attributes["tag"];
         //if (sTag.StartsWith("0008"))
         //   return false;
         if (data.NodeType == DicomXmlNodeType.Comment)
         {
            data.Comment = "COMMENT: customized xml file using the SaveXmlCallback";
            return false;
         }

         if (data.ElementName == "dataset")
         {
            data.Attributes.Add("new_attribute", "some_value");
         }
         else if (data.ElementName == "element")
         {
            data.ElementName = "element_newname";
            string sTagValue = data.Attributes["tag"];
            data.Attributes.Remove("tag");
            data.Attributes.Add("tag_newname", sTagValue);
         }
         return true;
      }

      private bool MyLoadXmlBeforeElementCallback(LoadXmlBeforeElementData data)
      {
         string sTagValue = data.Attributes["tag_newname"];
         long tag = 0;
         sTagValue = sTagValue.Replace(",", string.Empty);
         if (long.TryParse(sTagValue, System.Globalization.NumberStyles.HexNumber, null, out tag))
            data.Tag = tag;
         return true;
      }

      private void MyLoadXmlAfterElementCallback(LoadXmlAfterElementData data)
      {
         if (data.DicomElement.Tag == DicomTag.PixelData)
         {
            // here you could call one of the following to set the pixel data
            //    data.DicomDataSet.SetBinaryValue 
            //    data.DicomDataSet.SetImage()
         }
      }  

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--DicomExtensions.SaveXmlCallback-->
      </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      <summary>
            Optional delegate method that is used with the LoadXml methods.
            </summary>
      <keywords>
            Callbacks|delegate
            </keywords>
      <param name="data">
            An instance of the <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData" /> class containing the progress callback data.
            </param>
      <returns>
            return true to include this DICOM element in the DicomDataSet; return false to exclude the element from the DicomDataSet
            </returns>
      <remarks>
            This delegate is called once for each DICOM element, before it is added to the DicomDataSet. 
            If you pass this delegate with the <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)" /> methods, 
            you must fill in certain fields of the <paramref name="data" />
            For details, see the documentation for <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData" /></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      <summary>
            Optional delegate method that is used with the LoadXml methods.
            </summary>
      <keywords>
            Callbacks|delegate
            </keywords>
      <param name="data">
            An instance of the <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementData" /> class containing the progress callback data.
            </param>
      <remarks>
            This delegate is called once for each DICOM element, after it has been added to the to the <see cref="T:Leadtools.Dicom.DicomDataSet" />. 
            If you pass this delegate with the <see cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)" /> methods, 
            you can change the value of the <see cref="T:Leadtools.Dicom.DicomElement" /> by calling one of the <see cref="T:Leadtools.Dicom.DicomDataSet" /> SetValue methods.
            For details, see the documentation for <see cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementData" /></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback"></see>.
            </example>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags,Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback,Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.LoadXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetLoadXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags,Leadtools.Dicom.Common.Extensions.SaveXmlCallback)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.String,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Dicom.Common.Extensions.DicomExtensions.SaveXml(Leadtools.Dicom.DicomDataSet,System.IO.Stream,Leadtools.Dicom.Common.Extensions.DicomDataSetSaveXmlFlags)">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.SaveXmlCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlBeforeElementCallback">
      </seealso>
      <seealso cref="T:Leadtools.Dicom.Common.Extensions.LoadXmlAfterElementCallback">
      </seealso>
    </member>
    <member name="T:Leadtools.Dicom.Common.Editing.Converters.RasterImageConverter">
      <summary>
            Provides a type converter to convert a RasterImage object to a string.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.Editing.Converters.RasterImageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType" /> parameter is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep">
      <summary>
            Class that defines an item in a scheduled procedure step sequence.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.ScheduledStationAeTitle">
      <summary>
            Gets or sets the scheduled station ae title.
            </summary>
      <value>The scheduled station ae title.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.ScheduledProcedureStepStartDate">
      <summary>
            Gets or sets the scheduled procedure step start date.
            </summary>
      <value>The scheduled procedure step start date.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.ScheduleProcedureStepStartTime">
      <summary>
            Gets or sets the schedule procedure step start time.
            </summary>
      <value>The schedule procedure step start time.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.ScheduledProcedureStepLocation">
      <summary>
            Gets or sets the scheduled procedure step location.
            </summary>
      <value>The scheduled procedure step location.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.Modality">
      <summary>
            Gets or sets the modality.
            </summary>
      <value>The modality.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.ScheduledPerformingPhysician">
      <summary>
            Gets or sets the scheduled performing physician name.
            </summary>
      <value>The scheduled performing physician name.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.ScheduledProcedureStepId">
      <summary>
            Gets or sets the scheduled procedure step id.
            </summary>
      <value>The scheduled procedure step id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.ScheduledProtocolCodeSequence">
      <summary>
            Gets or sets the scheduled protocol code sequence.
            </summary>
      <value>The scheduled protocol code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.ScheduledProcedureStepDescription">
      <summary>
            Gets or sets the scheduled procedure step description.
            </summary>
      <value>The scheduled procedure step description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.RequestedProcedureComments">
      <summary>
            Gets or sets the requested procedure comments.
            </summary>
      <value>The requested procedure comments.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.ScheduledProcedureStep.RequestedProcedureDescription">
      <summary>
            Gets or sets the requested procedure description.
            </summary>
      <value>The requested procedure description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.PatientUpdater.DeletePatient">
      <summary>
            Provides the necessary information to delete a patient via the Patient Updater DICOM Service.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.PatientUpdater.DeletePatient.PatientId">
      <summary>
            Gets or sets the patient id to delete.
            </summary>
      <value>
            The patient id to delete.
            </value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute">
      <summary>
            Class that defines an item in a scheduled step attribute sequence.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.StudyInstanceUid">
      <summary>
            Gets or sets the study instance uid.
            </summary>
      <value>The study instance uid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.ReferencedStudySequence">
      <summary>
            Gets or sets the referenced study sequence.
            </summary>
      <value>The referenced study sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.AccessionNumber">
      <summary>
            Gets or sets the accession number.
            </summary>
      <value>The accession number.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.PlacerOrderNumber">
      <summary>
            Gets or sets the placer order number.
            </summary>
      <value>The placer order number.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.FillOrderNumber">
      <summary>
            Gets or sets the fill order number.
            </summary>
      <value>The fill order number.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.RequestedProcedureId">
      <summary>
            Gets or sets the requested procedure id.
            </summary>
      <value>The requested procedure id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.RequestedProcedureCodeSequence">
      <summary>
            Gets or sets the requested procedure code sequence.
            </summary>
      <value>The requested procedure code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.RequestedProcedureDescription">
      <summary>
            Gets or sets the requested procedure description.
            </summary>
      <value>The requested procedure description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.ScheduledProcedureStepId">
      <summary>
            Gets or sets the scheduled procedure step id.
            </summary>
      <value>The scheduled procedure step id.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.ScheduledProcedureStepDescription">
      <summary>
            Gets or sets the scheduled procedure step description.
            </summary>
      <value>The scheduled procedure step description.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.Modality.ScheduledStepAttribute.ScheduledProtocolCodeSequence">
      <summary>
            Gets or sets the scheduled protocol code sequence.
            </summary>
      <value>The scheduled protocol code sequence.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.StorageMediaFileSet">
      <summary>
            Represents information about the volume the DICOM media is written to.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.StorageMediaFileSet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Dicom.Common.DataTypes.StorageMediaFileSet" /> class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.StorageMediaFileSet.FileSetID">
      <summary>
            Gets or sets the media file set ID.
            </summary>
      <value>The media file set ID.</value>
      <remarks>Defines an implementation specific human readable identifier that identifies the storage media where
            composite instnaces resides.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.StorageMediaFileSet.FileSetUID">
      <summary>
            Gets or sets the media file set UID.
            </summary>
      <value>The media file set UID.</value>
      <remarks>Uniquely identifies the storage media on which the composite object instances reside.</remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Dicom.Common.DataTypes.DateRange">
      <summary>
            Represents a date range.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.DateRange.Equals(Leadtools.Dicom.Common.DataTypes.DateRange)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.Dicom.Common.DataTypes.DateRange.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DateRange.StartDate">
      <summary>
            Gets or sets the start date.
            </summary>
      <value>The start date.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.Dicom.Common.DataTypes.DateRange.EndDate">
      <summary>
            Gets or sets the end date.
            </summary>
      <value>The end date.</value>
      <noexample />
      <noremarks />
    </member>
  </members>
</doc>